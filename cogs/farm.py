from datetime import datetime
from decimal import Decimal
import inspect
import os
from discord.ext import commands, tasks
import discord
import aiosqlite
import asyncio
import json
import random
from discord import app_commands
import pytz
import ext
from enum import Enum

class Cards(Enum):
    GTX760 = {"name": "GTX 760", "ins": 0.001, "price": 10}
    GTX1050_TI = {"name": "GTX 1050 TI", "ins": 0.015, "price": 50}
    GTX1060_TI = {"name": "GTX 1060 TI", "ins": 0.05, "price": 200}
    RTX3060_TI = {"name": "RTX 3060 TI", "ins": 0.2, "price": 1000}
    RTX4080 = {"name": "RTX 4080", "ins": 1.0, "price": 5000}
    RTX4090_TI = {"name": "RTX 4090 TI", "ins": 2.5, "price": 20000}
    TESLA_T4 = {"name": "Tesla T4", "ins": 5.0, "price": 50000}
    TESLA_T4_X2 = {"name": "Tesla T4 X2", "ins": 12.0, "price": 100000}

    @property
    def ins(self):
        return self.value["ins"]

    @property
    def price(self):
        return self.value["price"]
    
    @property
    def name(self):
        return self.value["name"]

class FarmMenu():
    class FarmBuyView(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)

        @discord.ui.button(label="–ü–æ–∫—É–ø–∞—é! [5000 –ë]", style=discord.ButtonStyle.success, emoji="üíµ")
        async def yesbuyfarm(self, inter: discord.Interaction, button: discord.ui.Button):
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT balance FROM sbp WHERE id =?", (inter.user.id,))
                balance = await cursor.fetchone()
                if not balance: return await inter.response.send_message(ephemeral=True,embed=discord.Embed(
                    title="–ù–µ—Ç —Å—á—ë—Ç–∞!", description="–í–∏–∂—É, —Ç–µ–±–µ –Ω–µ—á–µ–º –ø–ª–∞—Ç–∏—Ç—å!\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –°–ë–ü –∏—Å–ø–æ–ª—å–∑—É—è /reg, –∞ –∑–∞—Ç–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞–π –±–µ–±—Ä.\n–í–æ–æ–±—â–µ-—Ç–æ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–æ–≤ –∏—Ö –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥ –∫–∞–ø—á–∏ /captcha, –∫–∞–∑–∏–Ω–æ /casino, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ /quests, –∞ —Ç–∞–∫-–∂–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö —É –º–µ–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! (—Å—Å—ã–ª–∫–∞ —É –º–µ–Ω—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ)", color=discord.Color.red()))
                if balance[0] < 5000: return await inter.response.send_message(ephemeral=True,embed=discord.Embed(
                    title="–í—ã –±–æ–º–∂!", description="–£–≤—ã, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ ‚Äî —É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–µ–±—Ä –Ω–∞ —Å—á–µ—Ç—É.\n–í–æ–æ–±—â–µ-—Ç–æ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–æ–≤ –∏—Ö –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥ –∫–∞–ø—á–∏ /captcha, –∫–∞–∑–∏–Ω–æ /casino, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ /quests, –∞ —Ç–∞–∫-–∂–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö —É –º–µ–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! (—Å—Å—ã–ª–∫–∞ —É –º–µ–Ω—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ)", color=discord.Color.red()))

                await cursor.execute("UPDATE sbp SET balance = balance - 5000 WHERE id =?", (inter.user.id,))
                await cursor.execute("INSERT INTO `farms` (id) VALUES (?)", (inter.user.id,))
                await db.commit()

            await inter.response.edit_message(embed=discord.Embed(
                    title="–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!", description="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –º–æ–µ–π —Ñ–µ—Ä–º—ã, —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ —Ç–≤–æ—è, —Ä–∞–∑–≤–ª–µ–∫–∞–π—Å—è!", color=discord.Color.green()), view=FarmMenu.FarmMMView())
            
    class FarmMMView(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)

        @discord.ui.button(label="–ö—É–ø–∏—Ç—å –Ω–æ–≤—É—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É", style=discord.ButtonStyle.success, emoji="üõí")
        async def buycards(self, inter: discord.Interaction, button: discord.ui.Button):
            await inter.response.send_message(content="–ö–∞—Ç–∞–ª–æ–≥ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç:", view=FarmMenu.BuyCardsView(), embed=None, ephemeral=True)

        @discord.ui.button(label="–ú–æ–π —Å—á—ë—Ç", style=discord.ButtonStyle.blurple, emoji="üíµ",row=2)
        async def mybalance(self, inter: discord.Interaction, button: discord.ui.Button):
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT * FROM farms WHERE id =?", (inter.user.id,))
                usr = await cursor.fetchone()

            embed = discord.Embed(
                title="–ú–æ–π —Å—á—ë—Ç",
                description=f"–ë–∞–ª–∞–Ω—Å –£–∑–±–∏–ö–æ–π–Ω–æ–≤: {usr[1]:.3f}\n–£–∑–±–∏–ö–æ–π–Ω–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {usr[2]:.3f}",
                color=discord.Color.random()
            )

            await inter.response.edit_message(embed=embed, view=FarmMenu.FarmMMView())

        @discord.ui.button(label="–ú–æ–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", style=discord.ButtonStyle.blurple, emoji="üïπÔ∏è",row=2)
        async def mycards(self, inter: discord.Interaction, button: discord.ui.Button):
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT cards FROM farms WHERE id =?", (inter.user.id,))
                cards = await cursor.fetchone()
            cards = json.loads(cards[0])

            embed = discord.Embed(
                title="–ú–æ–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã",
                description="\n".join([f"**{card['name']}**: +{card['ins']} UCS - {card["count"]} —à—Ç." for card in cards]),
                color=discord.Color.random()
            )
            await inter.response.edit_message(embed=embed, view=FarmMenu.FarmMMView())

        @discord.ui.button(label="–í—ã–≤–æ–¥ UCS", style=discord.ButtonStyle.danger, emoji="üì§",row=3)
        async def vivoducs(self, inter: discord.Interaction, button: discord.ui.Button):
            await inter.response.send_modal(FarmMenu.exportucs())

    class BuyCardsView(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)
            for i, card in enumerate(Cards):
                label = f"{card.value['name']} [{card.value['price']:,} UCS]"
                button = discord.ui.Button(
                    label=label,
                    style=discord.ButtonStyle.success,
                    emoji="üíµ",
                    row=i // 2 
                )
                button.callback = self.create_button_callback(card)
                self.add_item(button)

        def create_button_callback(self, card):
            async def button_callback(interaction: discord.Interaction):
                if await FarmMenu.buy_card(card=card, user_id=interaction.user.id):
                    await interaction.response.send_message("–£—Å–ø–µ—à–Ω–æ!", ephemeral=True, embed=None)
                else:
                    await interaction.response.send_message("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –£–∑–±–∏–ö–æ–π–Ω–æ–≤!", ephemeral=True)
            
            return button_callback
        
    async def buy_card(card: Cards, user_id: int | str):
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM farms WHERE id =?", (user_id,))
            usr = await cursor.fetchone()

        if usr[1] < card.price: return False

        cards = json.loads(usr[3])
        for card1 in cards:
            if card1["name"] == card.name:
                card1["count"] += 1
                break
        else:
            cards.append({"name": card.name, "ins": card.ins, "count": 1})
        
        async with aiosqlite.connect(dbn) as db:
            cursor = await db.cursor()
            await cursor.execute("UPDATE farms SET (cards, balance, ins) = (?, balance -?, ins +?) WHERE id =?", (json.dumps(cards), card.price, card.ins, user_id))
            await db.commit()

        return True

    class exportucs(discord.ui.Modal, title = "–í—ã–≤–æ–¥ UCS | 0.005 –∑–∞ 1 –±–µ–±—Ä—É"):
        def __init__(self):
            super().__init__()

        value = discord.ui.TextInput(label="–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–±—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞", required=True)

        async def on_submit(self, inter: discord.Interaction):
            try:
                value = float(self.value.value)
            except:
                return await inter.response.send_message("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ, –ª–∏–±–æ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ (0.1)!", ephemeral=True)
            
            if value < 500:
                return await inter.response.send_message("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ - 500 –ë–µ–±—Ä (100.000 UCS)", ephemeral=True)
            
            async with aiosqlite.connect(dbn) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT balance FROM farms WHERE id =?", (inter.user.id,))
                balance = await cursor.fetchone()
            
            balance = balance[0]
            ucs = value / 0.005

            if balance < ucs:
                return await inter.response.send_message(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {(ucs-balance):.3f} UCS!", ephemeral=True)
            
            async with aiosqlite.connect(dbn) as db:
                cursor = await db.cursor()
                await cursor.execute("UPDATE farms SET balance = balance - ? WHERE id =?", (ucs, inter.user.id))
                await cursor.execute("UPDATE sbp SET balance = balance + ? WHERE id =?", (value, inter.user.id))
                await db.commit()

            await inter.response.send_message(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤—ë–ª {value} –±–µ–±—Ä ({ucs:.3f} UCS) –Ω–∞ —Ç–≤–æ–π —Å—á—ë—Ç!", ephemeral=True)

class Farm(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot: commands.Bot = bot
        self.timer.start()

    @app_commands.command( description="–ú–∞–π–Ω–∏–Ω–≥–æ–≤–∞—è —Ñ–µ—Ä–º–∞ << –£ –õ–µ–≥–µ–Ω–¥—ã >>", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(ext.check)
    async def farm(self, inter: discord.Interaction):
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM farms WHERE id =?", (inter.user.id,))
            usr = await cursor.fetchone()

        if not usr:
            embed = discord.Embed(
                title="–ú–∞–π–Ω–∏–Ω–≥–æ–≤–∞—è —Ñ–µ—Ä–º–∞ << –£ –õ–µ–≥–µ–Ω–¥—ã >>",
                description=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –Ω–∞ **–º–æ–µ–π** —Ñ–µ—Ä–º–µ, {inter.user.global_name}!\n–í–∏–∂—É, —Ç—ã —Ö–æ—á–µ—à—å —á—Ç–æ–±—ã —è –ø–æ–¥–∞—Ä–∏–ª —Ç–µ–±–µ –µ—ë, –Ω–æ –±–µ–∑ –ø–ª–∞—Ç—ã —è –Ω–µ –º–æ–≥—É —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å.\n–ü–µ—Ä–µ–¥ —ç—Ç–∏–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–ª–∞—Ç–∏—Ç—å –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –±–µ–±—Ä!\n\n–ù—É —á—Ç–æ, —Å–æ–≥–ª–∞—Å–µ–Ω?",
                color=discord.Color.random()
            )

            await inter.response.send_message(embed=embed, view=FarmMenu.FarmBuyView(), ephemeral=True)
        else:
            await inter.response.send_message("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, " + inter.user.global_name, view=FarmMenu.FarmMMView(), ephemeral=True)

    @tasks.loop(seconds=1)
    async def timer(self):
        async with aiosqlite.connect(dbn) as db:
            cursor = await db.cursor()
            await cursor.execute("UPDATE farms SET balance = balance + ins")
            await db.commit()

async def setup(bot: commands.Bot):
    global dbn
    dbn = bot.dbn
    await bot.add_cog(Farm(bot))
    print("Farm cog loaded")