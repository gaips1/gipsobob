from datetime import datetime, timedelta
from decimal import Decimal
import inspect
import os
from discord.ext import commands, tasks
import discord
import aiosqlite
import asyncio
import json
import random
from discord import app_commands
import pytz
import ext
from enum import Enum

class Cards(Enum):
    GTX760 = {"name": "GTX 760", "ins": 0.001, "price": 10}
    GTX1050_TI = {"name": "GTX 1050 TI", "ins": 0.01, "price": 50}
    GTX1060_TI = {"name": "GTX 1060 TI", "ins": 0.035, "price": 200}
    RTX3060_TI = {"name": "RTX 3060 TI", "ins": 0.15, "price": 2000}
    RTX4080 = {"name": "RTX 4080", "ins": 0.7, "price": 8500}
    RTX4090_TI = {"name": "RTX 4090 TI", "ins": 1.45, "price": 30000}
    TESLA_T4 = {"name": "Tesla T4", "ins": 3.6, "price": 60000}
    TESLA_T4_X2 = {"name": "Tesla T4 X2", "ins": 7.5, "price": 120000}

    @property
    def ins(self):
        return self.value["ins"]

    @property
    def price(self):
        return self.value["price"]
    
    @property
    def name(self):
        return self.value["name"]

class FarmMenu():
    class FarmBuyView(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)

        @discord.ui.button(label="–ü–æ–∫—É–ø–∞—é! [5000 –ë]", style=discord.ButtonStyle.success, emoji="üíµ")
        async def yesbuyfarm(self, inter: discord.Interaction, button: discord.ui.Button):
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT balance FROM sbp WHERE id =?", (inter.user.id,))
                balance = await cursor.fetchone()
                if not balance: return await inter.response.send_message(ephemeral=True,embed=discord.Embed(
                    title="–ù–µ—Ç —Å—á—ë—Ç–∞!", description="–í–∏–∂—É, —Ç–µ–±–µ –Ω–µ—á–µ–º –ø–ª–∞—Ç–∏—Ç—å!\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –°–ë–ü –∏—Å–ø–æ–ª—å–∑—É—è /reg, –∞ –∑–∞—Ç–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞–π –±–µ–±—Ä.\n–í–æ–æ–±—â–µ-—Ç–æ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–æ–≤ –∏—Ö –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥ –∫–∞–ø—á–∏ /captcha, –∫–∞–∑–∏–Ω–æ /casino, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ /quests, –∞ —Ç–∞–∫-–∂–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö —É –º–µ–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! (—Å—Å—ã–ª–∫–∞ —É –º–µ–Ω—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ)", color=discord.Color.red()))
                if balance[0] < 5000: return await inter.response.send_message(ephemeral=True,embed=discord.Embed(
                    title="–í—ã –±–æ–º–∂!", description="–£–≤—ã, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ ‚Äî —É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–µ–±—Ä –Ω–∞ —Å—á–µ—Ç—É.\n–í–æ–æ–±—â–µ-—Ç–æ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–æ–≤ –∏—Ö –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥ –∫–∞–ø—á–∏ /captcha, –∫–∞–∑–∏–Ω–æ /casino, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ /quests, –∞ —Ç–∞–∫-–∂–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö —É –º–µ–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! (—Å—Å—ã–ª–∫–∞ —É –º–µ–Ω—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ)", color=discord.Color.red()))

                await cursor.execute("UPDATE sbp SET balance = balance - 5000 WHERE id =?", (inter.user.id,))
                await cursor.execute("INSERT INTO `farms` (id) VALUES (?)", (inter.user.id,))
                await db.commit()

            await inter.response.edit_message(embed=discord.Embed(
                    title="–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!", description="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –º–æ–µ–π —Ñ–µ—Ä–º—ã, —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ —Ç–≤–æ—è, —Ä–∞–∑–≤–ª–µ–∫–∞–π—Å—è!", color=discord.Color.green()), view=FarmMenu.FarmMMView())
            
    class FarmMMView(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)

        @discord.ui.button(label="–ö—É–ø–∏—Ç—å –Ω–æ–≤—É—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É", style=discord.ButtonStyle.success, emoji="üõí")
        async def buycards(self, inter: discord.Interaction, button: discord.ui.Button):
            await inter.response.send_message(content="–ö–∞—Ç–∞–ª–æ–≥ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç:", view=FarmMenu.BuyCardsView(), embed=None, ephemeral=True)

        @discord.ui.button(label="–ú–æ–π —Å—á—ë—Ç", style=discord.ButtonStyle.blurple, emoji="üíµ",row=2)
        async def mybalance(self, inter: discord.Interaction, button: discord.ui.Button):
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT * FROM farms WHERE id =?", (inter.user.id,))
                usr = await cursor.fetchone()

            embed = discord.Embed(
                title="–ú–æ–π —Å—á—ë—Ç",
                description=f"–ë–∞–ª–∞–Ω—Å –£–∑–±–∏–ö–æ–π–Ω–æ–≤: {usr[1]:.3f}\n–£–∑–±–∏–ö–æ–π–Ω–æ–≤ –≤ –º–∏–Ω—É—Ç—É: {usr[2]:.3f}",
                color=discord.Color.random()
            )

            await inter.response.edit_message(embed=embed, view=FarmMenu.FarmMMView())

        @discord.ui.button(label="–ú–æ–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", style=discord.ButtonStyle.blurple, emoji="üïπÔ∏è",row=2)
        async def mycards(self, inter: discord.Interaction, button: discord.ui.Button):
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT * FROM farms WHERE id =?", (inter.user.id,))
                user = await cursor.fetchone()

            await inter.response.edit_message(embed=await FarmMenu.get_cards_info(inter), view=FarmMenu.FarmCardsView(overheat_notif=user[5]))

        @discord.ui.button(label="–í—ã–≤–æ–¥ UCS", style=discord.ButtonStyle.danger, emoji="üì§",row=3)
        async def vivoducs(self, inter: discord.Interaction, button: discord.ui.Button):
            await inter.response.send_modal(FarmMenu.exportucs())

        @discord.ui.button(label="–ë—É—Å—Ç–µ—Ä—ã", style=discord.ButtonStyle.danger, emoji="üí•",row=3)
        async def boostersbtn(self, inter: discord.Interaction, button: discord.ui.Button):
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT booster FROM farms WHERE id =?", (inter.user.id,))
                booster = await cursor.fetchone()

            booster: dict = json.loads(booster[0])
            bstr = f"{booster["name"]} - –∏—Å—Ç–µ–∫–∞–µ—Ç <t:{booster["ends_timestamp"]}:R>" if len(booster) > 0 else "‚ùå‚ùå‚ùå"

            await inter.response.send_message(embed=discord.Embed(
                title="–ü–æ–∫—É–ø–∫–∞ –±—É—Å—Ç–µ—Ä–æ–≤",
                description=f"–ë—É—Å—Ç–µ—Ä—ã - —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∑–∞—Ä–∞–±–æ—Ç–∫–∞, –∏ —Ç.–¥.\n–ë—É—Å—Ç–µ—Ä, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n\n" + bstr,
                color=discord.Color.random()
            ), ephemeral=True, view=FarmMenu.FarmBoostersBuyView())

    class FarmBoostersBuyView(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)

        async def buybooster(self, inter: discord.Interaction, booster_to_buy: str):
            async with aiosqlite.connect(dbn) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT balance FROM sbp WHERE id =?", (inter.user.id,))
                bal = await cursor.fetchone()
                await cursor.execute("SELECT booster FROM farms WHERE id =?", (inter.user.id,))
                booster = await cursor.fetchone()

                booster: dict = json.loads(booster[0])
                bal: int = bal[0]

                if len(booster) > 0:
                    return await inter.response.send_message("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç–µ—Ä!", ephemeral=True)

                if booster_to_buy == "x1_5_10min":
                    if bal < 1499: return await inter.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", ephemeral=True)
                    ends = datetime.now() + timedelta(minutes=10)
                    booster = {"name": "x1.5 –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ 10 –º–∏–Ω—É—Ç", "ends": ends.isoformat(), "ends_timestamp": int(ends.timestamp())}
                    await cursor.execute("UPDATE sbp SET balance = balance - 1499 WHERE id =?", (inter.user.id,))
                    await cursor.execute("UPDATE farms SET booster = ? WHERE id =?", (json.dumps(booster), inter.user.id,))
                    await db.commit()

                elif booster_to_buy == "x1_5_30min":
                    if bal < 4399: return await inter.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", ephemeral=True)
                    ends = datetime.now() + timedelta(minutes=30)
                    booster = {"name": "x1.5 –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ 30 –º–∏–Ω—É—Ç", "ends": ends.isoformat(), "ends_timestamp": int(ends.timestamp())}
                    await cursor.execute("UPDATE sbp SET balance = balance - 4399 WHERE id =?", (inter.user.id,))
                    await cursor.execute("UPDATE farms SET booster = ? WHERE id =?", (json.dumps(booster), inter.user.id,))
                    await db.commit()

                elif booster_to_buy == "x2_10min":
                    if bal < 5999: return await inter.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", ephemeral=True)
                    ends = datetime.now() + timedelta(minutes=10)
                    booster ={"name": "x2 –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ 10 –º–∏–Ω—É—Ç", "ends": ends.isoformat(), "ends_timestamp": int(ends.timestamp())}
                    await cursor.execute("UPDATE sbp SET balance = balance - 5999 WHERE id =?", (inter.user.id,))
                    await cursor.execute("UPDATE farms SET booster = ? WHERE id =?", (json.dumps(booster), inter.user.id,))
                    await db.commit()

                elif booster_to_buy == "x2_30min":
                    if bal < 17599: return await inter.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", ephemeral=True)
                    ends = datetime.now() + timedelta(minutes=30)
                    booster = {"name": "x2 –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ 30 –º–∏–Ω—É—Ç", "ends": ends.isoformat(), "ends_timestamp": int(ends.timestamp())}
                    await cursor.execute("UPDATE sbp SET balance = balance - 17599 WHERE id =?", (inter.user.id,))
                    await cursor.execute("UPDATE farms SET booster = ? WHERE id =?", (json.dumps(booster), inter.user.id,))
                    await db.commit()

            bstr = f"{booster["name"]} - –∏—Å—Ç–µ–∫–∞–µ—Ç <t:{booster["ends_timestamp"]}:R>" if len(booster) > 0 else "‚ùå‚ùå‚ùå"

            await inter.response.edit_message(content="–£—Å–ø–µ—à–Ω–æ!", embed=discord.Embed(
                title="–ü–æ–∫—É–ø–∫–∞ –±—É—Å—Ç–µ—Ä–æ–≤",
                description=f"–ë—É—Å—Ç–µ—Ä—ã - —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∑–∞—Ä–∞–±–æ—Ç–∫–∞, –∏ —Ç.–¥.\n–ë—É—Å—Ç–µ—Ä, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n\n" + bstr,
                color=discord.Color.random()
            ))

        @discord.ui.button(label="x1.5 –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ 10 –º–∏–Ω—É—Ç [1,499 –ë]", style=discord.ButtonStyle.success, emoji="üõí",row=1)
        async def x1_5_10minbuybtn(self, inter: discord.Interaction, button: discord.ui.Button):
            await self.buybooster(inter, "x1_5_10min")

        @discord.ui.button(label="x1.5 –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ 30 –º–∏–Ω—É—Ç [4,399 –ë]", style=discord.ButtonStyle.success, emoji="üõí",row=2)
        async def x1_5_30minbuybtn(self, inter: discord.Interaction, button: discord.ui.Button):
            await self.buybooster(inter, "x1_5_30min")

        @discord.ui.button(label="x2 –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ 10 –º–∏–Ω—É—Ç [5,999 –ë]", style=discord.ButtonStyle.success, emoji="üõí",row=3)
        async def x2_10minbuybtn(self, inter: discord.Interaction, button: discord.ui.Button):
            await self.buybooster(inter, "x2_10min")

        @discord.ui.button(label="x2 –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ 30 –º–∏–Ω—É—Ç [17,599 –ë]", style=discord.ButtonStyle.success, emoji="üõí",row=4)
        async def x2_30minbuybtn(self, inter: discord.Interaction, button: discord.ui.Button):
            await self.buybooster(inter, "x2_30min")

    class FarmCardsView(discord.ui.View):
        def __init__(self, overheat_notif: int):
            super().__init__(timeout=None)
            button = discord.ui.Button(
                label="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞",
                style=discord.ButtonStyle.success,
                row=2,
                emoji="üîî"
            ) if overheat_notif == 1 or overheat_notif == 0 else discord.ui.Button(
                label="–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞",
                style=discord.ButtonStyle.danger,
                row=2,
                emoji="üîî"
            )
            button.callback = self.on_off_notif_cards_callback()
            self.add_item(button)

        def on_off_notif_cards_callback(self):
            async def on_off_notif_cards(inter: discord.Interaction):
                async with aiosqlite.connect(dbn, timeout=20) as db:
                    cursor = await db.cursor()
                    await cursor.execute("SELECT * FROM farms WHERE id =?", (inter.user.id,))
                    user = await cursor.fetchone()

                    if user[5] == 0:
                        return await inter.response.send_message(embed=discord.Embed(
                            title="–ü–æ–∫—É–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞",
                            description="–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–æ–∏—Ç 5.000 –±–µ–±—Ä!\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∫—É–ø–∫—É?",
                            color=discord.Color.random()
                        ), ephemeral=True, view=FarmMenu.FarmCardsBuyNotifView())
                    
                    elif user[5] == 1:
                        await cursor.execute("UPDATE farms SET overheat_notif = 2 WHERE id =?", (inter.user.id,))
                        await db.commit()
                        return await inter.response.edit_message(embed=await FarmMenu.get_cards_info(inter), view=FarmMenu.FarmCardsView(overheat_notif=2))
                    
                    elif user[5] == 2:
                        await cursor.execute("UPDATE farms SET overheat_notif = 1 WHERE id =?", (inter.user.id,))
                        await db.commit()
                        return await inter.response.edit_message(embed=await FarmMenu.get_cards_info(inter), view=FarmMenu.FarmCardsView(overheat_notif=1))

            return on_off_notif_cards

        @discord.ui.button(label="–ù–∞–∑–∞–¥", style=discord.ButtonStyle.blurple, emoji="üîô")
        async def backtomeny111111(self, inter: discord.Interaction, button: discord.ui.Button):
            await inter.response.edit_message(embed=await FarmMenu.get_cards_info(inter), view=FarmMenu.FarmMMView())

        @discord.ui.button(label="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", style=discord.ButtonStyle.success, emoji="‚ôªÔ∏è")
        async def restartcards(self, inter: discord.Interaction, button: discord.ui.Button):
            new_notif = datetime.now(pytz.timezone('Europe/Moscow')) + timedelta(hours=3)
            async with aiosqlite.connect(dbn) as db:
                await db.execute("UPDATE farms SET overheat = ? WHERE id =?", (new_notif.isoformat(), inter.user.id,))
                await db.commit()

            await inter.response.send_message(f"–£—Å–ø–µ—à–Ω–æ!\n–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä <t:{int(new_notif.timestamp())}:f>", ephemeral=True)

    class FarmCardsBuyNotifView(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)

        @discord.ui.button(label="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é [5000 –ë]", style=discord.ButtonStyle.success, emoji="üõí")
        async def buycardsnotif(self, inter: discord.Interaction, button: discord.ui.Button):
            async with aiosqlite.connect(dbn) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT * FROM sbp WHERE id =?", (inter.user.id,))
                user = await cursor.fetchone()

                if user[1] < 5000:
                    return await inter.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", ephemeral=True)
                
                await cursor.execute("UPDATE sbp SET balance = balance -? WHERE id =?", (5000, inter.user.id,))
                await cursor.execute("UPDATE farms SET overheat_notif = 1 WHERE id =?", (inter.user.id,))
                await db.commit()

            await inter.response.edit_message(content="–£—Å–ø–µ—à–Ω–æ!", view=None, embed=None)

    class BuyCardsView(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)
            for i, card in enumerate(Cards):
                label = f"{card.value['name']} [{card.value['price']:,} UCS]"
                button = discord.ui.Button(
                    label=label,
                    style=discord.ButtonStyle.success,
                    emoji="üíµ",
                    row=i // 2 
                )
                button.callback = self.create_button_callback(card)
                self.add_item(button)

        def create_button_callback(self, card):
            async def button_callback(interaction: discord.Interaction):
                if await FarmMenu.buy_card(card=card, user_id=interaction.user.id):
                    await interaction.response.send_message("–£—Å–ø–µ—à–Ω–æ!", ephemeral=True, embed=None)
                else:
                    await interaction.response.send_message("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –£–∑–±–∏–ö–æ–π–Ω–æ–≤!", ephemeral=True)
            
            return button_callback
        
    async def buy_card(card: Cards, user_id: int | str):
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM farms WHERE id =?", (user_id,))
            usr = await cursor.fetchone()

        if usr[1] < card.price: return False

        cards = json.loads(usr[3])
        for card1 in cards:
            if card1["name"] == card.name:
                card1["count"] += 1
                break
        else:
            cards.append({"name": card.name, "ins": card.ins, "count": 1})
        
        async with aiosqlite.connect(dbn) as db:
            cursor = await db.cursor()
            await cursor.execute("UPDATE farms SET (cards, balance, ins) = (?, balance -?, ins +?) WHERE id =?", (json.dumps(cards), card.price, card.ins, user_id))
            await db.commit()

        return True

    async def get_cards_info(inter: discord.Interaction):
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM farms WHERE id =?", (inter.user.id,))
            user = await cursor.fetchone()

        cards = json.loads(user[3])
        if user[4] != "1":
            time = datetime.fromisoformat(user[4])
            string = f"–í–∞—à —Å–µ—Ä–≤–µ—Ä –≤ –¥–∞–Ω–Ω—ã—Ö –º–æ–º–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ <t:{int(time.timestamp())}:f>"
        else:
            string = "–í–∞—à —Å–µ—Ä–≤–µ—Ä –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç **–ü–ï–†–ï–ì–†–£–ñ–ï–ù**, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –Ω–∞–∂–∞—Ç–∏–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏"

        if user[5] == 2:
            string += f"\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤: –≤–∫–ª—é—á–µ–Ω—ã"
        else:
            string += f"\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤: –≤—ã–∫–ª—é—á–µ–Ω—ã"

        embed = discord.Embed(
            title="–ú–æ–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã",
            description=f'{"\n".join([f"**{card['name']}**: +{card['ins']} UCS - {card["count"]} —à—Ç." for card in cards])}\n\n{string}',
            color=discord.Color.random()
        )
        return embed

    class exportucs(discord.ui.Modal, title = "–í—ã–≤–æ–¥ UCS | 0.002 –∑–∞ 1 –±–µ–±—Ä—É"):
        def __init__(self):
            super().__init__()

        value = discord.ui.TextInput(label="–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–±—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞", required=True)

        async def on_submit(self, inter: discord.Interaction):
            try:
                value = float(self.value.value)
            except:
                return await inter.response.send_message("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ, –ª–∏–±–æ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ (0.1)!", ephemeral=True)
            
            if value < 500:
                return await inter.response.send_message("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ - 500 –ë–µ–±—Ä (100.000 UCS)", ephemeral=True)
            
            async with aiosqlite.connect(dbn) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT balance FROM farms WHERE id =?", (inter.user.id,))
                balance = await cursor.fetchone()
            
            balance = balance[0]
            ucs = value / 0.002

            if balance < ucs:
                return await inter.response.send_message(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {(ucs-balance):.3f} UCS!", ephemeral=True)
            
            async with aiosqlite.connect(dbn) as db:
                cursor = await db.cursor()
                await cursor.execute("UPDATE farms SET balance = balance - ? WHERE id =?", (ucs, inter.user.id))
                await cursor.execute("UPDATE sbp SET balance = balance + ? WHERE id =?", (value, inter.user.id))
                await db.commit()

            await inter.response.send_message(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤—ë–ª {value} –±–µ–±—Ä ({ucs:.3f} UCS) –Ω–∞ —Ç–≤–æ–π —Å—á—ë—Ç!", ephemeral=True)

class Farm(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot: commands.Bot = bot
        self.timer.start()
        self.overheat_timer.start()
        self.boosters_timer.start()
        self.sperma_timer.start()

    @app_commands.command( description="–ú–∞–π–Ω–∏–Ω–≥–æ–≤–∞—è —Ñ–µ—Ä–º–∞ << –£ –õ–µ–≥–µ–Ω–¥—ã >>", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(ext.check)
    async def farm(self, inter: discord.Interaction):
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM farms WHERE id =?", (inter.user.id,))
            usr = await cursor.fetchone()

        if not usr:
            embed = discord.Embed(
                title="–ú–∞–π–Ω–∏–Ω–≥–æ–≤–∞—è —Ñ–µ—Ä–º–∞ << –£ –õ–µ–≥–µ–Ω–¥—ã >>",
                description=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –Ω–∞ **–º–æ–µ–π** —Ñ–µ—Ä–º–µ, {inter.user.global_name}!\n–í–∏–∂—É, —Ç—ã —Ö–æ—á–µ—à—å —á—Ç–æ–±—ã —è –ø–æ–¥–∞—Ä–∏–ª —Ç–µ–±–µ –µ—ë, –Ω–æ –±–µ–∑ –ø–ª–∞—Ç—ã —è –Ω–µ –º–æ–≥—É —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å.\n–ü–µ—Ä–µ–¥ —ç—Ç–∏–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–ª–∞—Ç–∏—Ç—å –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –±–µ–±—Ä!\n\n–ù—É —á—Ç–æ, —Å–æ–≥–ª–∞—Å–µ–Ω?",
                color=discord.Color.random()
            )

            await inter.response.send_message(embed=embed, view=FarmMenu.FarmBuyView(), ephemeral=True)
        else:
            await inter.response.send_message("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, " + inter.user.global_name, view=FarmMenu.FarmMMView(), ephemeral=True)

    @tasks.loop(minutes=1)
    async def timer(self):
        async with aiosqlite.connect(dbn) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM farms")
            users = await cursor.fetchall()
            for user in users:
                booster = json.loads(user[6])
                if len(booster) == 0:
                    await cursor.execute(f"UPDATE farms SET balance = balance + ? WHERE overheat != 1 AND id =?", (user[2], user[0],))
                else:
                    if booster["name"] == "x1.5 –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ 10 –º–∏–Ω—É—Ç" or booster["name"] == "x1.5 –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ 30 –º–∏–Ω—É—Ç":
                        await cursor.execute(f"UPDATE farms SET balance = balance + ? WHERE overheat != 1 AND id =?", (user[2]*1.5, user[0],))
                    elif booster["name"] == "x2 –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ 10 –º–∏–Ω—É—Ç" or booster["name"] == "x2 –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ 30 –º–∏–Ω—É—Ç":
                        await cursor.execute(f"UPDATE farms SET balance = balance + ? WHERE overheat != 1 AND id =?", (user[2]*2, user[0],))

            await db.commit()

    @tasks.loop(seconds=10)
    async def overheat_timer(self):
        async with aiosqlite.connect(dbn) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM farms")
            users = await cursor.fetchall()

            for user in users:
                if user[4] == "1":
                    continue

                elif user[4] == "2":
                    new_notif = (datetime.now(pytz.timezone('Europe/Moscow')) + timedelta(hours=3)).isoformat()
                    await cursor.execute("UPDATE farms SET overheat = ? WHERE id =?", (new_notif, user[0],))
                    await db.commit()
                else:
                    if datetime.fromisoformat(user[4]) <= datetime.now(pytz.timezone('Europe/Moscow')):
                        await cursor.execute("UPDATE farms SET overheat = 1 WHERE id =?", (user[0],))
                        if user[5] == 2:
                            usr = await ext.get_or_fetch_user(id=user[0])
                            await usr.send("–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –Ω–∞ —Ç–≤–æ–µ–π —Ñ–µ—Ä–º–µ –ø–µ—Ä–µ–≥—Ä–µ–ª–∏—Å—å!\n–°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞!")

                        await db.commit()

                await asyncio.sleep(0.35)

    @tasks.loop(seconds=1)
    async def boosters_timer(self):
         async with aiosqlite.connect(dbn) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM farms")
            users = await cursor.fetchall()

            for user in users:
                booster: dict = json.loads(user[6])
                if len(booster) > 0:
                    if datetime.fromisoformat(booster["ends"]) <= datetime.now():
                        await cursor.execute("UPDATE farms SET booster = '{}' WHERE id =?", (user[0],))
                        await db.commit()
                        usr = await ext.get_or_fetch_user(id=user[0])
                        await usr.send(f"–¢–≤–æ–π –±—É—Å—Ç–µ—Ä '**{booster["name"]}**' –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!")

    @tasks.loop(hours=48)
    async def sperma_timer(self):
        async with aiosqlite.connect(dbn) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM farms")
            users = await cursor.fetchall()

            for user in users:
                cards: list = json.loads(user[3])
                if random.random() < 0.1:
                    try:
                        rc = random.choice(cards)
                    except:
                        continue
                    if rc["count"] == 1:
                        cards.remove(rc)
                    else:
                        rc["count"] -= 1

                    await cursor.execute("UPDATE farms SET cards = ? WHERE id =?", (json.dumps(cards), user[0],))
                    await db.commit()
                    try:
                        usr = await ext.get_or_fetch_user(id=user[0])
                        await usr.send(f"–¢–≤–æ—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ '**{rc["name"]}**' —Å–≥–æ—Ä–µ–ª–∞!")
                    except:
                        continue
                
async def setup(bot: commands.Bot):
    global dbn
    dbn = bot.dbn
    await bot.add_cog(Farm(bot))
    print("Farm cog loaded")