import inspect
import json
from typing import List
from discord.ext import commands
import discord
import aiosqlite
import os
from discord import app_commands
import string
from PIL import Image, ImageDraw, ImageFont
import random
import ext

class Sbp(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot: commands.Bot = bot

    class turnon(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)

        @discord.ui.button(label="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style=discord.ButtonStyle.success, emoji="‚úÖ")
        async def tunroff11(self, inter: discord.Interaction, button: discord.ui.Button):
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.user.id,))
                user = await cursor.fetchone()

            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute(f"UPDATE sbp SET notif = 1 WHERE id = {inter.user.id}")
                await db.commit()

            await inter.response.edit_message(embed=discord.Embed(
                title=f"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: {inter.user.global_name}",
                description=f"**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∏—Å—Ç–µ–º—É –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π, {inter.user.global_name}!\n–ë–∞–ª–∞–Ω—Å: {user[1]} –±–µ–±—Ä\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã**"
            ), view=Sbp.turnoff())

        @discord.ui.button(label="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã", style=discord.ButtonStyle.blurple, emoji="üí∏")
        async def perevod1(self, inter: discord.Interaction, button: discord.ui.Button):
            await inter.response.send_message("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", ephemeral=True)
            def check(m):
                return m.author == inter.user

            msg: discord.Message = await inter.client.wait_for('message', check=check)
            try:
                user = await inter.client.fetch_user(int(msg.content))
            except:
                return await msg.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            if user.bot: return await msg.reply("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã –±–æ—Ç—É")
            if user == inter.user: return await msg.reply("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã —Å–µ–±–µ")

            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (user.id,))
                use = await cursor.fetchone()

            if not use: return await msg.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–∫–∞–∂–∏—Ç–µ –µ–º—É —á—Ç–æ–±—ã –æ–Ω —Å–¥–µ–ª–∞–ª —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**")

            await msg.reply(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **{user.global_name}** [{user.id}] \n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–ª–∞—Ç—ë–∂?", view=Sbp.yesornoH())

    class turnoff(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)

        @discord.ui.button(label="–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style=discord.ButtonStyle.danger, emoji="‚úñ")
        async def tunrofdff(self, inter: discord.Interaction, button: discord.ui.Button):
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.user.id,))
                user = await cursor.fetchone()

            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute(f"UPDATE sbp SET notif = 0 WHERE id = {inter.user.id}")
                await db.commit()

            await inter.response.edit_message(embed=discord.Embed(
                title=f"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: {inter.user.global_name}",
                description=f"**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∏—Å—Ç–µ–º—É –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π, {inter.user.global_name}!\n–ë–∞–ª–∞–Ω—Å: {user[1]} –±–µ–±—Ä\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤—ã–∫–ª—é—á–µ–Ω—ã**"
            ), view=Sbp.turnon())

        @discord.ui.button(label="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã", style=discord.ButtonStyle.blurple, emoji="üí∏")
        async def perevod(self, inter: discord.Interaction, button: discord.ui.Button):
            await inter.response.send_message("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", ephemeral=True)
            def check(m):
                return m.author == inter.user

            msg: discord.Message = await inter.client.wait_for('message', check=check)
            try:
                user = await inter.client.fetch_user(int(msg.content))
            except:
                return await msg.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            if user.bot: return await msg.reply("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã –±–æ—Ç—É")
            if user == inter.user: return await msg.reply("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã —Å–µ–±–µ")

            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (user.id,))
                use = await cursor.fetchone()

            if not use: return await msg.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–∫–∞–∂–∏—Ç–µ –µ–º—É —á—Ç–æ–±—ã –æ–Ω —Å–¥–µ–ª–∞–ª —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**")

            await msg.reply(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **{user.global_name}** [{user.id}] \n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–ª–∞—Ç—ë–∂?", view=Sbp.yesornoH())

    class yesornoH(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)

        @discord.ui.button(label="–î–∞", style=discord.ButtonStyle.success)
        async def accept_plat(self, inter: discord.Interaction, button: discord.ui.Button):
            user = await inter.client.fetch_user(int(inter.message.content.split()[6].replace("[", "").replace("]","")))
            await inter.response.send_modal(transferm(title="–ü–µ—Ä–µ–≤–æ–¥ " + str(user.global_name), user=user, messag=True))

        @discord.ui.button(label="–ù–µ—Ç", style=discord.ButtonStyle.danger)
        async def dontaccept_plat(self, inter: discord.Interaction, button: discord.ui.Button):
            await inter.response.edit_message(content="–û—Ç–º–µ–Ω–µ–Ω–æ", view=None)

    class turnon1(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)

        @discord.ui.button(label="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style=discord.ButtonStyle.success)
        async def gkrejgkerhlg(self, inter: discord.Interaction, button: discord.ui.Button):
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute(f"UPDATE sbp SET notif = 1 WHERE id = {inter.user.id}")
                await db.commit()
            await inter.response.edit_message(view=Sbp.turnoff1())

    class turnoff1(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)

        @discord.ui.button(label="–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style=discord.ButtonStyle.danger)
        async def gkrejgkerhlg(self, inter: discord.Interaction, button: discord.ui.Button):
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute(f"UPDATE sbp SET notif = 0 WHERE id = {inter.user.id}")
                await db.commit()
            await inter.response.edit_message(view=Sbp.turnon1())

    @app_commands.command( description="–¢–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –°–∏—Å—Ç–µ–º—ã –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π!", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(ext.check)
    async def account(self, inter: discord.Interaction):
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.user.id,))
            user = await cursor.fetchone()
        if not user:
            return await inter.response.send_message("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**", ephemeral=True)
        await inter.response.send_message(embed=discord.Embed(
            title=f"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: {inter.user.global_name}",
            description=f"**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∏—Å—Ç–µ–º—É –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π, {inter.user.global_name}!\n–ë–∞–ª–∞–Ω—Å: {round(user[1], 1)} –±–µ–±—Ä\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–≤–∫–ª—é—á–µ–Ω—ã' if user[2]==1 else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}**"
        ), ephemeral=True,view=Sbp.turnoff() if user[2]==1 else Sbp.turnon())

    @app_commands.command( description="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(ext.check)
    async def reg(self, inter: discord.Interaction):
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.user.id,))
            user = await cursor.fetchone()
        if not user:
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("INSERT INTO `sbp` (id) VALUES (?)", (inter.user.id,))
                await db.commit()
            return await inter.response.send_message("–£—Å–ø–µ—à–Ω–æ!", ephemeral=True)
        await inter.response.send_message("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", ephemeral=True)

    @app_commands.command( description="–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å–≥–∏ –°–ë–ü", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.describe(user="–ö–æ–º—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å?", amount="–°–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å?")
    @app_commands.check(ext.check)
    async def setbal(self, inter: discord.Interaction, amount:int, user:discord.User = None):
        if inter.user.id != 449882524697493515: return await inter.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", ephemeral=True)
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute(f'UPDATE sbp SET balance = {amount} WHERE id = {inter.user.id}') if not user else await cursor.execute(f'UPDATE sbp SET balance = {amount} WHERE id = {user.id}')
            await db.commit()
        await inter.response.send_message("–£—Å–ø–µ—à–Ω–æ!", ephemeral=True)

    @app_commands.command( description="–ü–µ—Ä–µ–≤–æ–¥ –±–µ–±—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –°–∏—Å—Ç–µ–º—ã –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(ext.check)
    @app_commands.describe(user="–ö–æ–º—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å?", amount="–°–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å?", comment="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É")
    async def transfer(self, inter: discord.Interaction, user:discord.User, amount:int, comment:str = None):
        if comment and len(comment) > 50:
            await inter.response.send_message(
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.", 
                ephemeral=True
            )
            return
        if amount <= 0: return await inter.response.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –Ω–µ –Ω—É–ª–µ–≤–æ–µ —á–∏—Å–ª–æ", ephemeral=True)
        if user.bot: return await inter.response.send_message("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã –±–æ—Ç—É", ephemeral=True)
        if user == inter.user: return await inter.response.send_message("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã —Å–µ–±–µ", ephemeral=True)
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.user.id,))
            me = await cursor.fetchone()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (user.id,))
            usr = await cursor.fetchone()

        if not me: return await inter.response.send_message("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**", ephemeral=True)
        if not usr: return await inter.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–∫–∞–∂–∏—Ç–µ –µ–º—É —á—Ç–æ–±—ã –æ–Ω —Å–¥–µ–ª–∞–ª —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**", ephemeral=True)

        if me[1] < amount: return await inter.response.send_message("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥", ephemeral=True)

        async with aiosqlite.connect(dbn) as db:
            cursor = await db.cursor()  
            await cursor.execute(f"UPDATE sbp SET balance = balance - {amount} WHERE id = {inter.user.id}")
            await cursor.execute(f"UPDATE sbp SET balance = balance + {amount} WHERE id = {user.id}")
            await db.commit()

        await inter.response.send_message("–£—Å–ø–µ—à–Ω–æ!", ephemeral=True)
        await ext.update_quest(inter.user, "transfer", amount)
        if usr[2] == 1:
            if comment:
                embed = discord.Embed(title=f"–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç {inter.user.global_name} —Å—É–º–º–æ–π {amount} –±–µ–±—Ä.", description=
                                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: **{comment}**", color=discord.Color.green())
            else:
                embed = discord.Embed(title=f"–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç {inter.user.global_name} —Å—É–º–º–æ–π {amount} –±–µ–±—Ä.", color=discord.Color.green())
            
            await user.send(embed=embed, view=Sbp.turnoff1())

    @app_commands.command( description="–ü—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É –∏ –ø–æ–ª—É—á–∏—Ç—å –±–µ–±—Ä—ã", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(ext.check)
    async def captcha(self, inter: discord.Interaction):
        letters = string.ascii_letters + string.digits
        kap = ''.join(random.choice(letters) for i in range(10))
        image = Image.new('RGB', (200, 50), (255, 255, 255))

        font = ImageFont.truetype('arial.ttf', 28)

        draw = ImageDraw.Draw(image)

        draw.text((10, 10), kap, font=font, fill=(0, 0, 0))
        image.save('random_text.png')

        await inter.response.send_message("–ü—Ä–∏–≤–µ—Ç!\n–¢–≤–æ—è –∫–∞–ø—á–∞:", ephemeral=True, file=discord.File('random_text.png'), view=captchab(captcha=kap))
        os.remove('random_text.png')

    @app_commands.command( description="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –≤ –°–ë–ü –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(ext.check)
    async def invite(self, inter: discord.Interaction):
        await inter.response.send_message(embed=discord.Embed(title="–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –°–ë–ü",
                                                              description="–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"),
                                                              view=AcceptInvite(author=inter.user))
        
class AcceptInvite(discord.ui.View):
    def __init__(self, author):
        super().__init__(timeout=None)
        self.author: discord.User = author

    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", style=discord.ButtonStyle.blurple, custom_id="accept_invite")
    async def accept_invite_handler(self, inter: discord.Interaction, button: discord.ui.Button):
        if inter.user == self.author: return await inter.response.send_message("–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–≤—Ç–æ—Ä–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", ephemeral=True)

        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.user.id,))
            user_db = await cursor.fetchone()        

            if user_db: return await inter.response.send_message("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π!", ephemeral=True)

            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (self.author.id,))
            invites = await cursor.fetchone()
            invites: list = json.loads(invites[3])
            invites.append(inter.user.id)

            await cursor.execute("INSERT INTO `sbp` (id) VALUES (?)", (inter.user.id,))
            await cursor.execute("UPDATE sbp SET (invites, balance) = (?, balance+?) WHERE id = ?", (json.dumps(invites), 200, self.author.id))
            await db.commit()

        await inter.response.send_message(embed=discord.Embed(title="–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ", description="–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –°–ë–ü –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç " + self.author.name), ephemeral=True)
        await self.author.send(f"{inter.user.name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –°–ë–ü –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!")

class captchab(discord.ui.View):
    def __init__(self, captcha: string):
        super().__init__(timeout=None)
        self.captcha = captcha

    @discord.ui.button(label="–í–≤–µ—Å—Ç–∏ –∫–∞–ø—á—É", style=discord.ButtonStyle.blurple)
    async def vvdod(self, inter: discord.Interaction, button: discord.ui.Button):
        await inter.response.send_modal(captcham(captcha=self.captcha))

class captcham(discord.ui.Modal, title = "–ö–∞–ø—á–∞"):
    def __init__(self, captcha):
        super().__init__()
        self.captcha: string  = captcha

    capt = discord.ui.TextInput(label="–í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É:", required=True)

    async def on_submit(self, inter: discord.Interaction):
        if self.capt.value == self.captcha:
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.user.id,))
                me = await cursor.fetchone()

            if not me: return await inter.response.edit_message(content="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**", view=None)

            async with aiosqlite.connect(dbn) as db:
                cursor = await db.cursor()  
                await cursor.execute(f"UPDATE sbp SET balance = balance + 5 WHERE id = {inter.user.id}")
                await db.commit()

            await inter.response.edit_message(content="–ö–∞–ø—á–∞ —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω–∞! –í–∞–º –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ 5 –±–µ–±—Ä", view=None)
            await ext.update_quest(inter.user, "captcha", )
        else:
            await inter.response.edit_message(content="–ö–∞–ø—á–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", view=None)

class transferm(discord.ui.Modal):
    def __init__(self, title, user, messag=False, *args, **kwargs):
        super().__init__(title=title,*args, **kwargs)
        self.user: discord.User = user
        self.messag = messag

    amount = discord.ui.TextInput(label="–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞", required=True)
    comment = discord.ui.TextInput(label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É",required=False, max_length=50)

    async def on_submit(self, inter: discord.Interaction):
        try:
            amount = int(self.amount.value)
        except:
            return await inter.response.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∞ –Ω–µ –±—É–∫–æ–≤–∫–∏", ephemeral=True)
        if amount <= 0: return await inter.response.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –Ω–µ –Ω—É–ª–µ–≤–æ–µ —á–∏—Å–ª–æ", ephemeral=True)

        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.user.id,))
            me = await cursor.fetchone()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (self.user.id,))
            usr = await cursor.fetchone()

        if me[1] < amount: return await inter.response.send_message("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥", ephemeral=True)

        async with aiosqlite.connect(dbn) as db:
            cursor = await db.cursor()  
            await cursor.execute(f"UPDATE sbp SET balance = balance - {amount} WHERE id = {inter.user.id}")
            await cursor.execute(f"UPDATE sbp SET balance = balance + {amount} WHERE id = {self.user.id}")
            await db.commit()

        if not self.messag:
            await inter.response.send_message(content="–£—Å–ø–µ—à–Ω–æ!", ephemeral=True)
        else:
            await inter.response.edit_message(content="–£—Å–ø–µ—à–Ω–æ!", view=None)

        await ext.update_quest(inter.user, "transfer", amount)

        if usr[2] == 1:
            if self.comment.value:
                embed = discord.Embed(title=f"–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç {inter.user.global_name} —Å—É–º–º–æ–π {amount} –±–µ–±—Ä.", description=
                                    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: **{self.comment.value}**", color=discord.Color.green())
            else:
                embed = discord.Embed(title=f"–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç {inter.user.global_name} —Å—É–º–º–æ–π {amount} –±–µ–±—Ä.", color=discord.Color.green())
            
            await self.user.send(embed=embed, view=Sbp.turnoff1())

async def setup(bot: commands.Bot):
    await bot.add_cog(Sbp(bot))
    bot.tree.add_command(transferu)
    global dbn
    dbn = bot.dbn
    print("Sbp cog loaded")

@app_commands.context_menu( name="–ü–µ—Ä–µ–≤–æ–¥", )
@app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
@app_commands.allowed_installs(guilds=True, users=True)
@app_commands.check(ext.check)
async def transferu(inter: discord.Interaction, user: discord.User):
    if user.bot: return await inter.response.send_message("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã –±–æ—Ç—É", ephemeral=True)
    if user == inter.user: return await inter.response.send_message("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã —Å–µ–±–µ", ephemeral=True)

    async with aiosqlite.connect(dbn, timeout=20) as db:
        cursor = await db.cursor()
        await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.user.id,))
        me = await cursor.fetchone()
        await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (user.id,))
        use = await cursor.fetchone()

    if not me: return await inter.response.send_message("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**", ephemeral=True)
    if not use: return await inter.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–∫–∞–∂–∏—Ç–µ –µ–º—É —á—Ç–æ–±—ã –æ–Ω —Å–¥–µ–ª–∞–ª —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**", ephemeral=True)

    await inter.response.send_modal(transferm(title="–ü–µ—Ä–µ–≤–æ–¥ " + str(user.global_name), user=user))