from disnake.ext import commands
import disnake
import aiosqlite
import os
import string
from PIL import Image, ImageDraw, ImageFont
import random

class Sbp(commands.Cog):

    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener("on_button_click")
    async def btnclicks(self, inter: disnake.MessageInteraction):
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.author.id,))
            user = await cursor.fetchone()

        if inter.component.custom_id == "turnoff":
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute(f"UPDATE sbp SET notif = 0 WHERE id = {inter.author.id}")
                await db.commit()
            await inter.response.edit_message(embed=disnake.Embed(
                title=f"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: {inter.author.global_name}",
                description=f"**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∏—Å—Ç–µ–º—É –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π, {inter.author.global_name}!\n–ë–∞–ª–∞–Ω—Å: {user[1]} –±–µ–±—Ä\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤—ã–∫–ª—é—á–µ–Ω—ã**"
            ), components=[disnake.ui.Button(label="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style=disnake.ButtonStyle.success, custom_id="turnon", emoji="‚úÖ"),
                        disnake.ui.Button(label="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã", style=disnake.ButtonStyle.blurple, custom_id="transferb", emoji="üí∏")])

        elif inter.component.custom_id == "turnon":
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute(f"UPDATE sbp SET notif = 1 WHERE id = {inter.author.id}")
                await db.commit()
            await inter.response.edit_message(embed=disnake.Embed(
                title=f"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: {inter.author.global_name}",
                description=f"**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∏—Å—Ç–µ–º—É –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π, {inter.author.global_name}!\n–ë–∞–ª–∞–Ω—Å: {user[1]} –±–µ–±—Ä\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã**"
            ), components=[disnake.ui.Button(label="–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style=disnake.ButtonStyle.danger, custom_id="turnoff", emoji="‚úñ"),
                        disnake.ui.Button(label="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã", style=disnake.ButtonStyle.blurple, custom_id="transferb", emoji="üí∏")])

        elif inter.component.custom_id == "turnon1":
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute(f"UPDATE sbp SET notif = 1 WHERE id = {inter.author.id}")
                await db.commit()
            await inter.response.edit_message(components=[disnake.ui.Button(label="–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style=disnake.ButtonStyle.danger, custom_id="turnoff1", emoji="‚úñ")])

        elif inter.component.custom_id == "turnoff1":
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute(f"UPDATE sbp SET notif = 0 WHERE id = {inter.author.id}")
                await db.commit()
            await inter.response.edit_message(components=[disnake.ui.Button(label="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style=disnake.ButtonStyle.success, custom_id="turnon1", emoji="‚úÖ")])

        elif inter.component.custom_id == "transferb":
            await inter.response.send_message("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", ephemeral=True)
            def check(m):
                return m.author == inter.author

            msg: disnake.Message = await self.bot.wait_for('message', check=check)
            try:
                user = await self.bot.fetch_user(int(msg.content))
            except:
                return await msg.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            if user.bot: return await msg.reply("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã –±–æ—Ç—É")
            if user == inter.author: return await msg.reply("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã —Å–µ–±–µ")

            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (user.id,))
                use = await cursor.fetchone()

            if not use: return await msg.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–∫–∞–∂–∏—Ç–µ –µ–º—É —á—Ç–æ–±—ã –æ–Ω —Å–¥–µ–ª–∞–ª —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**")

            await msg.reply(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **{user.global_name}** [{user.id}] \n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–ª–∞—Ç—ë–∂?", components=[
                disnake.ui.Button(label="–î–∞", style=disnake.ButtonStyle.success, custom_id="yes-transfer", emoji="‚úÖ"),
                disnake.ui.Button(label="–ù–µ—Ç", style=disnake.ButtonStyle.danger, custom_id="no-transfer", emoji="‚úñ")])
            
        elif inter.component.custom_id == "yes-transfer":
            user = await self.bot.getch_user(int(inter.message.content.split()[6].replace("[", "").replace("]","")))
            await inter.response.send_modal(transferm(title="–ü–µ—Ä–µ–≤–æ–¥ " + str(user.global_name), user=user, messag=True))

        elif inter.component.custom_id == "no-transfer":
            await inter.response.edit_message("–û—Ç–º–µ–Ω–µ–Ω–æ", components=[])

    @commands.slash_command(description="–¢–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –°–∏—Å—Ç–µ–º—ã –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π!", integration_types=[0,1], contexts=[0,1,2])
    async def account(self, inter: disnake.ApplicationCommandInteraction):
        if await self.bot.check(inter) == 1: return
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.author.id,))
            user = await cursor.fetchone()
        if not user:
            return await inter.response.send_message("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**", ephemeral=True)
        await inter.response.send_message(embed=disnake.Embed(
            title=f"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: {inter.author.global_name}",
            description=f"**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∏—Å—Ç–µ–º—É –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π, {inter.author.global_name}!\n–ë–∞–ª–∞–Ω—Å: {user[1]} –±–µ–±—Ä\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–≤–∫–ª—é—á–µ–Ω—ã' if user[2]==1 else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}**"
        ), ephemeral=True,
        components=[disnake.ui.Button(label="–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style=disnake.ButtonStyle.danger, custom_id="turnoff", emoji="‚úñ") if user[2]==1 else disnake.ui.Button(label="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style=disnake.ButtonStyle.success, custom_id="turnon", emoji="‚úÖ"),
                    disnake.ui.Button(label="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã", style=disnake.ButtonStyle.blurple, custom_id="transferb", emoji="üí∏")])

    @commands.slash_command(description="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π", integration_types=[0,1], contexts=[0,1,2])
    async def reg(self, inter: disnake.ApplicationCommandInteraction):
        if await self.bot.check(inter) == 1: return
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.author.id,))
            user = await cursor.fetchone()
        if not user:
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("INSERT INTO `sbp` (id) VALUES (?)", (inter.author.id,))
                await db.commit()
            return await inter.response.send_message("–£—Å–ø–µ—à–Ω–æ!", ephemeral=True)
        await inter.response.send_message("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", ephemeral=True)

    @commands.slash_command(description="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ –≤ –°–ë–ü", integration_types=[0,1], contexts=[0,1,2], options=[
        disnake.Option(name="amount", description="–ù–∞ —Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è—Ç—å?", required=True, type=disnake.OptionType.integer),
        disnake.Option(name="user", description="–ö–æ–º—É –∏–∑–º–µ–Ω—è—Ç—å?", required=False, type=disnake.OptionType.user)
    ])
    async def setbal(self, inter: disnake.ApplicationCommandInteraction):
        if inter.author.id != 449882524697493515: return await inter.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", ephemeral=True)
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute(f'UPDATE sbp SET balance = {inter.options["amount"]} WHERE id = {inter.author.id}') if not inter.options.get("user") else await cursor.execute(f'UPDATE sbp SET balance = {inter.options["amount"]} WHERE id = {inter.options.get("user").id}')
            await db.commit()
        await inter.response.send_message("–£—Å–ø–µ—à–Ω–æ!", ephemeral=True)

    @commands.user_command(name="–ü–µ—Ä–µ–≤–æ–¥", integration_types=[0,1], contexts=[0,1,2])
    async def transferu(self, inter: disnake.UserCommandInteraction, user: disnake.User):
        if await self.bot.check(inter) == 1: return
        if user.bot: return await inter.response.send_message("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã –±–æ—Ç—É", ephemeral=True)
        if user == inter.author: return await inter.response.send_message("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã —Å–µ–±–µ", ephemeral=True)

        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.author.id,))
            me = await cursor.fetchone()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (user.id,))
            use = await cursor.fetchone()

        if not me: return await inter.response.send_message("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**", ephemeral=True)
        if not use: return await inter.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–∫–∞–∂–∏—Ç–µ –µ–º—É —á—Ç–æ–±—ã –æ–Ω —Å–¥–µ–ª–∞–ª —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**", ephemeral=True)

        await inter.response.send_modal(transferm(title="–ü–µ—Ä–µ–≤–æ–¥ " + str(user.global_name), user=user))

    @commands.slash_command(description="–ü–µ—Ä–µ–≤–æ–¥ –±–µ–±—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –°–∏—Å—Ç–µ–º—ã –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π", integration_types=[0,1], contexts=[0,1,2], options=[
        disnake.Option(name="user", description="–ö–æ–º—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å?", required=True, type=disnake.OptionType.user),
        disnake.Option(name="amount", description="–°–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å?", required=True, type=disnake.OptionType.string),
        disnake.Option(name="comment", description="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É?", required=False, type=disnake.OptionType.string, max_length=50)
    ])
    async def transfer(self, inter: disnake.ApplicationCommandInteraction):
        if await self.bot.check(inter) == 1: return
        try:
            amount = int(inter.options.get("amount"))
        except:
            return await inter.response.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∞ –Ω–µ –±—É–∫–æ–≤–∫–∏", ephemeral=True)
        if amount <= 0: return await inter.response.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –Ω–µ –Ω—É–ª–µ–≤–æ–µ —á–∏—Å–ª–æ", ephemeral=True)
        user = inter.options.get("user")
        if user.bot: return await inter.response.send_message("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã –±–æ—Ç—É", ephemeral=True)
        if user == inter.author: return await inter.response.send_message("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ–±—Ä—ã —Å–µ–±–µ", ephemeral=True)
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.author.id,))
            me = await cursor.fetchone()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (user.id,))
            usr = await cursor.fetchone()

        if not me: return await inter.response.send_message("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**", ephemeral=True)
        if not usr: return await inter.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–∫–∞–∂–∏—Ç–µ –µ–º—É —á—Ç–æ–±—ã –æ–Ω —Å–¥–µ–ª–∞–ª —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**", ephemeral=True)

        if me[1] < amount: return await inter.response.send_message("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥", ephemeral=True)

        async with aiosqlite.connect(dbn) as db:
            cursor = await db.cursor()  
            await cursor.execute(f"UPDATE sbp SET balance = balance - {amount} WHERE id = {inter.author.id}")
            await cursor.execute(f"UPDATE sbp SET balance = balance + {amount} WHERE id = {user.id}")
            await db.commit()

        await inter.response.send_message("–£—Å–ø–µ—à–Ω–æ!", ephemeral=True)

        if usr[2] == 1:
            if inter.options.get("comment"):
                embed = disnake.Embed(title=f"–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç {inter.author.global_name} —Å—É–º–º–æ–π {amount} –±–µ–±—Ä.", description=
                                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: **{inter.options.get("comment")}**", color=disnake.Color.green())
            else:
                embed = disnake.Embed(title=f"–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç {inter.author.global_name} —Å—É–º–º–æ–π {amount} –±–µ–±—Ä.", color=disnake.Color.green())
            
            await user.send(embed=embed, components=[disnake.ui.Button(label="–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style=disnake.ButtonStyle.danger, custom_id="turnoff1", emoji="‚úñ")])

    @commands.slash_command(description="–ü—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É –∏ –ø–æ–ª—É—á–∏—Ç—å –±–µ–±—Ä—ã", integration_types=[0,1], contexts=[0,1,2])
    async def captcha(self, inter: disnake.UserCommandInteraction):
        if await self.bot.check(inter) == 1: return
        letters = string.ascii_letters + string.digits
        kap = ''.join(random.choice(letters) for i in range(10))
        image = Image.new('RGB', (200, 50), (255, 255, 255))

        # Open a font file
        font = ImageFont.truetype('arial.ttf', 28)

        # Create a draw object
        draw = ImageDraw.Draw(image)

        # Draw the text on the image
        draw.text((10, 10), kap, font=font, fill=(0, 0, 0))

        # Save the image to a file
        image.save('random_text.png')
        #await ctx.respond(f'–ü—Ä–∏–≤–µ—Ç!\n–£ —Ç–µ–±—è 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–≤–æ–¥ –∫–∞–ø—á–∏!', view=kapch(), ephemeral=True, file=discord.File('random_text.png'))
        await inter.response.send_message("–ü—Ä–∏–≤–µ—Ç!\n–¢–≤–æ—è –∫–∞–ø—á–∞:", ephemeral=True, file=disnake.File('random_text.png'), view=captchab(captcha=kap))
        os.remove('random_text.png')

class captchab(disnake.ui.View):
    def __init__(self, captcha: string):
        super().__init__(timeout=None)
        self.captcha = captcha

    @disnake.ui.button(label="–í–≤–µ—Å—Ç–∏ –∫–∞–ø—á—É", style=disnake.ButtonStyle.blurple)
    async def vvdod(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.send_modal(captcham(captcha=self.captcha))

class captcham(disnake.ui.Modal):
    def __init__(self, captcha: string):
        components = [
            disnake.ui.TextInput(
                label="–ö–∞–ø—á–∞",
                custom_id="captcha",
                style=disnake.TextInputStyle.short,
                required=True,
                max_length=11,
            ),
        ]
        super().__init__(title="–ö–∞–ø—á–∞", components=components)
        self.captcha: string  = captcha

    async def callback(self, inter: disnake.ModalInteraction):
        if inter.text_values["captcha"] == self.captcha:
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.author.id,))
                me = await cursor.fetchone()

            if not me: return await inter.response.edit_message("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**", view=None)

            async with aiosqlite.connect(dbn) as db:
                cursor = await db.cursor()  
                await cursor.execute(f"UPDATE sbp SET balance = balance + 5 WHERE id = {inter.author.id}")
                await db.commit()

            await inter.response.edit_message("–ö–∞–ø—á–∞ —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω–∞! –í–∞–º –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ 5 –±–µ–±—Ä", view=None)
        else:
            await inter.response.edit_message("–ö–∞–ø—á–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", view=None)

class transferm(disnake.ui.Modal):
    def __init__(self, title, user, messag=False):
        components = [
            disnake.ui.TextInput(
                label="–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞",
                custom_id="amount",
                style=disnake.TextInputStyle.short,
                required=True,
            ),
            disnake.ui.TextInput(
                label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É",
                required=False,
                custom_id="comment",
                style=disnake.TextInputStyle.short,
                max_length=50
            )
        ]
        super().__init__(title=title, components=components)
        self.user: disnake.User = user
        self.messag = messag

    async def callback(self, inter: disnake.ModalInteraction):
        try:
            amount = int(inter.text_values["amount"])
        except:
            return await inter.response.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∞ –Ω–µ –±—É–∫–æ–≤–∫–∏", ephemeral=True)
        if amount <= 0: return await inter.response.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –Ω–µ –Ω—É–ª–µ–≤–æ–µ —á–∏—Å–ª–æ", ephemeral=True)

        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (inter.author.id,))
            me = await cursor.fetchone()
            await cursor.execute("SELECT * FROM `sbp` WHERE id = ?", (self.user.id,))
            usr = await cursor.fetchone()

        if me[1] < amount: return await inter.response.send_message("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥", ephemeral=True)

        async with aiosqlite.connect(dbn) as db:
            cursor = await db.cursor()  
            await cursor.execute(f"UPDATE sbp SET balance = balance - {amount} WHERE id = {inter.author.id}")
            await cursor.execute(f"UPDATE sbp SET balance = balance + {amount} WHERE id = {self.user.id}")
            await db.commit()

        if not self.messag:
            await inter.response.send_message("–£—Å–ø–µ—à–Ω–æ!", ephemeral=True)
        else:
            await inter.response.edit_message("–£—Å–ø–µ—à–Ω–æ!", components=[])

        if usr[2] == 1:
            if inter.text_values["comment"]:
                embed = disnake.Embed(title=f"–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç {inter.author.global_name} —Å—É–º–º–æ–π {amount} –±–µ–±—Ä.", description=
                                    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: **{inter.text_values['comment']}**", color=disnake.Color.green())
            else:
                embed = disnake.Embed(title=f"–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç {inter.author.global_name} —Å—É–º–º–æ–π {amount} –±–µ–±—Ä.", color=disnake.Color.green())
            
            await self.user.send(embed=embed, components=[disnake.ui.Button(label="–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style=disnake.ButtonStyle.danger, custom_id="turnoff1", emoji="‚úñ")])

def setup(bot):
    bot.add_cog(Sbp(bot))
    global dbn
    dbn = bot.dbn
    print("Sbp cog loaded")
