import enum
from discord.ext import commands
import discord
import aiosqlite
import asyncio
import random
from discord import app_commands
import g4f.Provider
import g4f.Provider.bing
import g4f.image
from ext import *
import g4f

class RpsStatus(enum.Enum):
    in_game = 1
    waiting_accept = 2
    finished = 3
    timeout = 4

class Rps():
    """–ö–∞–º–µ–Ω—å –ù–æ–∂–Ω–∏—Ü—ã –ë—É–º–∞–≥–∞"""
    class RpsAcceptView(discord.ui.View):
        def __init__(self, game: 'Rps'):
            super().__init__(timeout=60)
            self.game = game
            self.message: discord.Message = None

        async def on_timeout(self) -> None:
            if self.game.status != RpsStatus.waiting_accept: return
            self.children[0].disabled = True
            self.children[0].label = "–ù–µ —É—Å–ø–µ–ª :("
            await self.message.edit(content="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", view=self)
            self.game.status = RpsStatus.timeout

        @discord.ui.button(label="–°–æ–≥–ª–∞—Å–µ–Ω –∏–≥—Ä–∞—Ç—å", style=discord.ButtonStyle.success)
        async def yesplayrps(self, inter: discord.Interaction, button: discord.ui.Button):
            remaining_time = (self.message.created_at + datetime.timedelta(minutes=1)) - datetime.datetime.now(pytz.utc)
            self.timeout = max(remaining_time.total_seconds(), 0)
            if inter.user != self.game.p2: return await inter.response.send_message("–ù–µ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏", ephemeral=True)
            if self.game.stavka != None:
                async with aiosqlite.connect(dbn, timeout=20) as db:
                    cursor = await db.cursor()
                    await cursor.execute("SELECT balance FROM sbp WHERE id =?", (inter.user.id,))
                    balance = await cursor.fetchone()
                    balance = balance[0]
                    if balance < self.game.stavka: return await inter.response.send_message("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥", ephemeral=True)
                    await cursor.execute("SELECT balance FROM sbp WHERE id =?", (self.game.p1.id,))
                    balance = await cursor.fetchone()
                    balance = balance[0]
                    if balance < self.game.stavka: return await inter.response.send_message("–£ —Ç–æ–≥–æ –∫—Ç–æ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∏–≥—Ä–∞—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏.", ephemeral=True)
                    await cursor.execute("UPDATE sbp SET balance = balance -? WHERE id =?", (self.game.stavka, inter.user.id))
                    await cursor.execute("UPDATE sbp SET balance = balance -? WHERE id =?", (self.game.stavka, self.game.p1.id))
                    await db.commit()

            embed = discord.Embed(
                title=f"–¶—É–µ—Ñ–∞ {self.game.p1.name} VS {self.game.p2.name}",
                description=f"–ò–≥—Ä–æ–∫–∏ –¥—É–º–∞—é—Ç...\n||–£ –Ω–∏—Ö 3 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ç–æ —á—Ç–æ–± –¥—É–º–æ—Ü||",
                color=discord.Color.random()
            )

            self.game.status = RpsStatus.in_game
            view = self.game.RpsGameView(self.game, self.message)
            self.game.view = view

            await inter.response.edit_message(embed=embed, view=view)

    class RpsGameView(discord.ui.View):
        def __init__(self, game: 'Rps', message = discord.Message):
            super().__init__(timeout=180)
            self.game = game
            self.message = message

        async def on_timeout(self) -> None:
            if self.game.status != RpsStatus.in_game: return
            for x in self.children:
                x.disabled = True
            self.game.status = RpsStatus.timeout
            await self.message.edit(content="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", view=self)

            if self.game.stavka != None:
                async with aiosqlite.connect(dbn, timeout=20) as db:
                    cursor = await db.cursor()
                    await cursor.execute("UPDATE `sbp` SET balance = balance +? WHERE id =?", (self.game.stavka, self.game.p1.id,))
                    await cursor.execute("UPDATE `sbp` SET balance = balance +? WHERE id =?", (self.game.stavka, self.game.p2.id,))
                    await db.commit()

        @discord.ui.button(label="–ö–∞–º–µ–Ω—å", style=discord.ButtonStyle.success, emoji="ü™®")
        async def rpsrock(self, inter: discord.Interaction, button: discord.ui.Button):
            remaining_time = (inter.message.edited_at + datetime.timedelta(minutes=3)) - datetime.datetime.now(pytz.utc)
            self.timeout = max(remaining_time.total_seconds(), 0)
            if inter.user != self.game.p1 and inter.user!= self.game.p2: return await inter.response.send_message("–ù–µ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏", ephemeral=True)
            if self.game.status != RpsStatus.in_game: return await inter.response.send_message("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞", ephemeral=True)
            if self.game.choices[inter.user] != None: return await inter.response.send_message("–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª", ephemeral=True)

            await self.game.set_choice(inter.user, "–∫–∞–º–µ–Ω—å")

            opponent = self.game.p2 if inter.user == self.game.p1 else self.game.p1

            if self.game.choices[opponent] != None:
                await self.game.get_winner(self.message)

            await inter.response.send_message("–£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª –∫–∞–º–µ–Ω—å!", ephemeral=True)

        @discord.ui.button(label="–ù–æ–∂–Ω–∏—Ü—ã", style=discord.ButtonStyle.success, emoji="‚úÇÔ∏è")
        async def rpssc(self, inter: discord.Interaction, button: discord.ui.Button):
            remaining_time = (inter.message.edited_at + datetime.timedelta(minutes=3)) - datetime.datetime.now(pytz.utc)
            self.timeout = max(remaining_time.total_seconds(), 0)
            if inter.user != self.game.p1 and inter.user!= self.game.p2: return await inter.response.send_message("–ù–µ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏", ephemeral=True)
            if self.game.status != RpsStatus.in_game: return await inter.response.send_message("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞", ephemeral=True)
            if self.game.choices[inter.user] != None: return await inter.response.send_message("–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª", ephemeral=True)

            await self.game.set_choice(inter.user, "–Ω–æ–∂–Ω–∏—Ü—ã")

            opponent = self.game.p2 if inter.user == self.game.p1 else self.game.p1

            if self.game.choices[opponent] != None:
                await self.game.get_winner(self.message)

            await inter.response.send_message("–£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª –Ω–æ–∂–Ω–∏—Ü—ã!", ephemeral=True)

        @discord.ui.button(label="–ë—É–º–∞–≥–∞", style=discord.ButtonStyle.success, emoji="üìÑ")
        async def rpspaper(self, inter: discord.Interaction, button: discord.ui.Button):
            remaining_time = (inter.message.edited_at + datetime.timedelta(minutes=3)) - datetime.datetime.now(pytz.utc)
            self.timeout = max(remaining_time.total_seconds(), 0)
            if inter.user != self.game.p1 and inter.user!= self.game.p2: return await inter.response.send_message("–ù–µ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏", ephemeral=True)
            if self.game.status != RpsStatus.in_game: return await inter.response.send_message("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞", ephemeral=True)
            if self.game.choices[inter.user] != None: return await inter.response.send_message("–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª", ephemeral=True)

            await self.game.set_choice(inter.user, "–±—É–º–∞–≥–∞")

            opponent = self.game.p2 if inter.user == self.game.p1 else self.game.p1

            if self.game.choices[opponent] != None:
                await self.game.get_winner(self.message)

            await inter.response.send_message("–£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª –±—É–º–∞–≥–∞!", ephemeral=True)

    def __init__(self, p1: discord.User | discord.Member, p2: discord.User | discord.Member, stavka: int = None, status: RpsStatus = RpsStatus.waiting_accept):
        self.p1 = p1
        self.p2 = p2
        self.stavka = stavka
        self.status = status
        self.choices = {self.p1: None, self.p2: None}
        self.view = self.RpsAcceptView(self)

    async def meow(self):
        """Meow"""
        return "meow"
    
    async def set_choice(self, player, choice):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞"""
        if player not in self.choices:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–≥—Ä–æ–∫")
        if choice not in ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        self.choices[player] = choice

        if all(self.choices.values()):
            self.status = RpsStatus.finished

    async def get_winner(self, message: discord.Message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞"""
        if self.status != RpsStatus.finished:
            raise Exception("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞")

        p1_choice = self.choices[self.p1]
        p2_choice = self.choices[self.p2]

        if p1_choice == p2_choice:
            for x in self.view.children:
                x.disabled = True

            if self.stavka != None:
                async with aiosqlite.connect(dbn, timeout=20) as db:
                    cursor = await db.cursor()
                    await cursor.execute("UPDATE `sbp` SET balance = balance +? WHERE id =?", (self.stavka, self.p1.id,))
                    await cursor.execute("UPDATE `sbp` SET balance = balance +? WHERE id =?", (self.stavka, self.p2.id,))
                    await db.commit()

            return await message.edit(embed=discord.Embed(
                title=f"–¶—É–µ—Ñ–∞ {self.p1.name} VS {self.p2.name}",
                description="**–ù–∏—á—å—è!!!!!**",
                color=discord.Color.yellow()
            ), view=self.view)
        elif (p1_choice == "–∫–∞–º–µ–Ω—å" and p2_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or \
             (p1_choice == "–Ω–æ–∂–Ω–∏—Ü—ã" and p2_choice == "–±—É–º–∞–≥–∞") or \
             (p1_choice == "–±—É–º–∞–≥–∞" and p2_choice == "–∫–∞–º–µ–Ω—å"):
            for x in self.view.children:
                x.disabled = True

            if self.stavka != None:
                async with aiosqlite.connect(dbn, timeout=20) as db:
                    cursor = await db.cursor()
                    await cursor.execute("UPDATE `sbp` SET balance = balance +? WHERE id =?", (self.stavka*2, self.p1.id,))
                    await db.commit()

            return await message.edit(embed=discord.Embed(
                title=f"–¶—É–µ—Ñ–∞ {self.p1.name} VS {self.p2.name}", 
                description=f"**{self.p1.name} –≤—ã–∏–≥—Ä–∞–ª!!!!!!**",
                color=discord.Color.green()
            ), view=self.view)
        else:
            for x in self.view.children:
                x.disabled = True

            if self.stavka != None:
                async with aiosqlite.connect(dbn, timeout=20) as db:
                    cursor = await db.cursor()
                    await cursor.execute("UPDATE `sbp` SET balance = balance +? WHERE id =?", (self.stavka*2, self.p2.id,))
                    await db.commit()

            return await message.edit(embed=discord.Embed(
                title=f"–¶—É–µ—Ñ–∞ {self.p1.name} VS {self.p2.name}",
                description=f"**{self.p2.name} –≤—ã–∏–≥—Ä–∞–ª!!!!!!**",
                color=discord.Color.green()
            ), view=self.view)

class sexb(discord.ui.View):
    def __init__(self, user, author):
        super().__init__(timeout=None)
        self.user: discord.User = user
        self.author: discord.User = author

    @discord.ui.button(label="–î–∞", style=discord.ButtonStyle.success)
    async def yessex(self, inter: discord.Interaction, button: discord.ui.Button):
        if inter.user != self.user: return await inter.response.send_message("–ó–∞–≤–∏–¥—É–π –º–æ–ª—á–∞, —ç—Ç–æ –Ω–µ —Ç–µ–±–µ —Å–µ–∫—Å –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏", ephemeral=True)
        
        giffs = ["https://media.tenor.com/pn5xTq0WtqcAAAAC/anime-girl.gif", "https://media.tenor.com/9G1zsVIiV6UAAAAC/anime-bed.gif", "https://media.tenor.com/tdK59AzAWZgAAAAC/pokemon-anime.gif"
                    , "https://media.tenor.com/i7S2Taae5H8AAAAC/sex-anime.gif", "https://media.tenor.com/eq-B2_glw0sAAAAC/ver-anime.gif"]
        randgif = random.choice(giffs)
        soglaz=discord.Embed(title=f"**{self.user.global_name} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —Å–µ–∫—Å —Å {self.author.global_name}**", color=discord.Color.random())
        soglaz.set_image(url=randgif)

        for x in self.children:
            x.disabled = True

        await inter.response.edit_message(view=self)
        
        await inter.followup.send(embed=soglaz)

        await update_quest(self.author, "sex", )

    @discord.ui.button(label="–ù–µ—Ç", style=discord.ButtonStyle.danger)
    async def nosex(self , inter: discord.Interaction, button: discord.ui.Button):
        if inter.user != self.user: return await inter.response.send_message("–ó–∞–≤–∏–¥—É–π –º–æ–ª—á–∞, —ç—Ç–æ –Ω–µ —Ç–µ–±–µ —Å–µ–∫—Å –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏", ephemeral=True)
        for x in self.children:
            x.disabled = True

        await inter.response.edit_message(view=self)
        
        await inter.followup.send(f"**{self.author.mention}, –≤–æ—Ç —á—ë—Ä—Ç, —Ç–µ–±–µ –æ—Ç–∫–∞–∑–∞–ª {self.user.mention} :(**")

class Fun(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot: commands.Bot = bot
        bot.add_view(turnoff1())
        bot.add_view(turnon1())
        bot.add_view(turnoff2())
        bot.add_view(turnon2())

    @app_commands.command( description="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(check)
    async def monetka(self, inter: discord.Interaction):
        wh = random.choices(["–û—Ä—ë–ª!", "–†–µ—à–∫–∞!", "–†–µ–±—Ä–æ!"], weights=[45,45, 10], k=1)[0]
        await inter.response.send_message("–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞—é...")
        await asyncio.sleep(2.5)
        await inter.edit_original_response(content=wh)
        if wh == "–†–µ–±—Ä–æ!":
            await update_quest(inter.user, "monetka", )

    @app_commands.command( description="–î–∞ –∏–ª–∏ –Ω–µ—Ç", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(check)
    async def yesorno(self, inter: discord.Interaction):
        wh = random.choice(["–î–∞", "–ù–µ—Ç"])
        await inter.response.send_message(wh)

    @app_commands.command( description="–†—É—Å—Å–∫–∞—è –†—É–ª–µ—Ç–∫–∞", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(check)
    async def russianroulette(self, inter: discord.Interaction):
        await inter.response.send_message("–í—Å—Ç–∞–≤–ª—è—é –ø—É–ª—é...")
        await asyncio.sleep(1.5)
        await inter.edit_original_response(content="–†–∞—Å–∫—Ä—É—á–∏–≤–∞—é –±–∞—Ä–∞–±–∞–Ω...")
        await asyncio.sleep(1.5)
        if random.choices([False,True], weights=[90,10], k=1)[0] == True:
            await inter.edit_original_response(content="–ë—É–º! –¢–µ–±–µ —Ä–∞–∑–æ—Ä–≤–∞–ª–æ –ª–∏—Ü–æ.")
            await update_quest(inter.user, "rr", )
        else:
            await inter.edit_original_response(content="–ü–æ–≤–µ–∑–ª–æ, —Ç—ã –æ—Å—Ç–∞–ª—Å—è –∂–∏–≤.")

    @app_commands.command( description="–ö–∏–Ω—É—Ç—å –∫–æ—Å—Ç–∏", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(check)
    async def kosti(self, inter: discord.Interaction):
        await inter.response.send_message("–ö–∏–¥–∞—é...")
        await asyncio.sleep(2.5)
        await inter.edit_original_response(content="–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ " + str(random.randint(1, 6)))
        await update_quest(inter.user, "kosti", )

    @app_commands.command( description="–°–ª–∞–≤–∞ —É–∑–±–∏–∏!", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(check)
    async def slava_uzbii(self, inter: discord.Interaction):
        await inter.response.send_message(embed=discord.Embed(title="–°–ª–∞–≤–∞ —É–∑–±–∏–∏!", color=discord.Color.random()))
        await update_quest(inter.user, "slava_uzbii", )

    @app_commands.command( description="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–µ–∫—Å", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.describe(user="–ö–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–µ–∫—Å?")
    @app_commands.check(check)
    async def sex(self, inter: discord.Interaction, user:discord.User):
        if user.bot: return await inter.response.send_message("–ó–∞—á–µ–º –µ–±–∞—Ç—å –±–æ—Ç–∞?", ephemeral=True)
        if user == inter.user: return await inter.response.send_message("–¢—ã —á–µ –µ–±–∞—Ç—å —Å–µ–±—è —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è?", ephemeral=True)
        await inter.response.send_message(embed=discord.Embed(title=f"{user.global_name}, {inter.user.global_name} –ø—Ä–µ–¥–ª–æ–∂–∏–ª –í–∞–º —Å–µ–∫—Å, –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?", color=discord.Color.random())
                                            , view=sexb(user, inter.user))
        
    @app_commands.command( description="–û–≥—Ä–∞–±–∏—Ç—å –∫–æ–≥–æ –ª–∏–±–æ", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.describe(user="–ö–æ–≥–æ –≥—Ä–∞–±–∏—Ç—å?")
    @app_commands.check(check)
    @app_commands.checks.cooldown(1, 86400)
    async def rob(self, inter: discord.Interaction, user: discord.User):
        if user.bot: return await inter.response.send_message("–ó–∞—á–µ–º –≥—Ä–∞–±–∏—Ç—å –±–æ—Ç–∞?", ephemeral=True)
        if inter.user == user: return await inter.response.send_message("–ó–∞—á–µ–º –≥—Ä–∞–±–∏—Ç—å —Å–µ–±—è?", ephemeral=True)
       
        if random.randint(1, 100) <= 60:
            await inter.response.send_message("–í—ã –ø–æ–ø–∞–ª–∏—Å—å!", ephemeral=True)
        else:
            bigwin = random.randint(150, 900)
            
            await update_quest(inter.user, "rob", )

            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT * FROM `sbp` WHERE id =?", (inter.user.id,))
                usr = await cursor.fetchone()
                if not usr:
                    return await inter.response.send_message("–í—ã —É–∫—Ä–∞–ª–∏ " + str(bigwin) + " –±–µ–±—Ä!\n–ù–æ —É –≤–∞—Å –Ω–µ –±—ã–ª–æ –°–ë–ü –∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –¥–µ–Ω—å–≥–∏ :(\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É—è /reg!", ephemeral=True)

                await cursor.execute("UPDATE `sbp` SET balance = balance +? WHERE id =?", (bigwin, inter.user.id,))
                await db.commit()

        await inter.response.send_message("–í—ã —É–∫—Ä–∞–ª–∏ " + str(bigwin) + " –±–µ–±—Ä!", ephemeral=True)

    @rob.error
    async def on_rob_error(self, inter: discord.Interaction, error: app_commands.AppCommandError):
        if isinstance(error, app_commands.CommandOnCooldown):
            await inter.response.send_message("–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –≥—Ä–∞–±–µ–∂–∞ —á–µ—Ä–µ–∑ " + str(int(error.retry_after)) + " —Å–µ–∫—É–Ω–¥.", ephemeral=True)

    @app_commands.command( description="–ö–∞–∑–∏–Ω–æ", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(check)
    async def casino(self, inter: discord.Interaction):
        await inter.response.send_message(embed=
        discord.Embed(title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!", description="**–í—ã–±–∏—Ä–∞–π—Ç–µ –∏–≥—Ä—É:**", color=discord.Color.random()), view=casinoV(),
        ephemeral=True)

    @app_commands.command( description="–ö–∞–º—à–æ—Ç", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(check)
    async def cumshot(self, inter: discord.Interaction, user: discord.User):
        if user.bot: return await inter.response.send_message("–ó–∞—á–µ–º –∫–∞–º—à–æ—Ç–∏—Ç—å –≤ –±–æ—Ç–∞?", ephemeral=True)
        if user == inter.user: return await inter.response.send_message("–¢—ã —á–µ –∫–∞–º—à–æ—Ç–∏—Ç—å –≤ —Å–µ–±—è —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è?", ephemeral=True)

        await inter.response.send_message(f"–í—ã–ø—É—Å–∫–∞—é –∫–∞–º –≤ {user.global_name}...")
        await asyncio.sleep(1.5)
        if random.random() < 0.5:
            await update_quest(inter.user, "cumshot", )
            await inter.edit_original_response(content="–£—Å–ø–µ—à–Ω–æ –ø–æ–ø–∞–ª –∫–∞–º–æ–º –ø—Ä—è–º–æ –≤ –≥–ª–∞–∑ " + user.global_name)
        else:
            await inter.edit_original_response(content="–£–≤—ã, –Ω–µ –ø–æ–ø–∞–ª –∫–∞–º–æ–º –≤ –≥–ª–∞–∑ " + user.global_name)

    @app_commands.command( description="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—ã–≥—Ä–∞—Ç—å –≤ —Ü—É–µ—Ñ–∞", name="—Ü—É–µ—Ñ–∞")
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(check)
    @app_commands.describe(user="–ö–æ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å?", stavka="–°—Ç–∞–≤–∫–∞ –≤ –±–µ–±—Ä–∞—Ö")
    async def rps(self, inter: discord.Interaction, user: discord.User, stavka: int = None):
        if user.bot: return await inter.response.send_message("–ó–∞—á–µ–º –∏–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º?", ephemeral=True)
        if user == inter.user: return await inter.response.send_message("–¢—ã —á–µ –∏–≥—Ä–∞—Ç—å c —Å–æ–±–æ–π —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è?", ephemeral=True)
        if stavka and stavka < 50: return await inter.response.send_message("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 50 –±–µ–±—Ä", ephemeral=True)

        if stavka != None:
            async with aiosqlite.connect(dbn, timeout=20) as db:
                cursor = await db.cursor()
                await cursor.execute("SELECT * FROM sbp WHERE id =?", (inter.user.id,))
                usr = await cursor.fetchone()
            if not usr: await inter.response.send_message("–£ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –°–ë–ü, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /reg, –ª–∏–±–æ –∏–≥—Ä–∞–π—Ç–µ –±–µ–∑ —Å—Ç–∞–≤–∫–∏", ephemeral=True)
            if usr[1] < stavka: return await inter.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ–±—Ä", ephemeral=True)

        embed = discord.Embed(title="–¶—É–µ—Ñ–∞", description=f"**{inter.user.name}** –ø—Ä–µ–¥–ª–æ–∂–∏–ª **{user.name}** –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Ü—É–µ—Ñ–∞!\n–ë–µ–∑ —Å—Ç–∞–≤–∫–∏!\n–£ –Ω–µ–≥–æ 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –æ—Ç–≤–µ—Ç!" if stavka == None else
                              f"**{inter.user.name}** –ø—Ä–µ–¥–ª–æ–∂–∏–ª **{user.name}** –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Ü—É–µ—Ñ–∞!\n–°—Ç–∞–≤–∫–∞ {stavka} –±–µ–±—Ä\n–£ –Ω–µ–≥–æ 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –æ—Ç–≤–µ—Ç!", color=discord.Color.random())

        game = Rps(inter.user, user, stavka)
        await inter.response.send_message(embed=embed, view=game.view)
        game.view.message = await inter.original_response()

    @app_commands.command( description="–°–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ —Ç–æ —É –º–µ–Ω—è", )
    @app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
    @app_commands.allowed_installs(guilds=True, users=True)
    @app_commands.check(check)
    @app_commands.describe(what="–ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?",ephemeral="–í–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å?", show_prompt="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ–º —Ç–æ —á—Ç–æ —Ç—ã —Å–ø—Ä–æ—Å–∏–ª?")
    @app_commands.choices(ephemeral=[app_commands.Choice(name="–î–∞", value="True"), app_commands.Choice(name="–ù–µ—Ç", value="False")],
                          show_prompt=[app_commands.Choice(name="–î–∞", value="True"), app_commands.Choice(name="–ù–µ—Ç", value="False")])
    async def ask(self, inter: discord.Interaction, what: str, ephemeral: str = "False", show_prompt: str = "False"):
        if len(what) > 100: return await inter.response.send_message("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", ephemeral=True)
        ephemeral = True if ephemeral == "True" else False
        show_prompt = True if show_prompt == "True" else False
        await inter.response.send_message("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–∏ –≥–ª—É–ø—ã–µ —Å–ª–æ–≤–∞...", ephemeral=ephemeral)

        try:
            response = await g4f.ChatCompletion.create_async(
                model=g4f.models.gpt_4o_mini,
                messages=[{"role": "system", "content": "–¢—ã ‚Äî –ì–∏–ø—Å–æ–±–æ–±, –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ü–µ—Ä–µ–º–æ–Ω–∏—Ç—Å—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É –≤ –æ—Ç–≤–µ—Ç–∞—Ö. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∑–∫–æ –∏ –≥—Ä—É–±–æ."},
                        {"role": "user", "content": what}],
                )
            chat_gpt_response = response
        except Exception as e:
            chat_gpt_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. - " + str(e)

        await inter.edit_original_response(content=str(chat_gpt_response) + f"\n\n||–ü—Ä–æ–º–ø—Ç: {what}||" if show_prompt else str(chat_gpt_response))
    
class casinoV(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–°–ª–æ—Ç—ã", style=discord.ButtonStyle.success, custom_id="sloti", emoji="üé∞")
    async def ruletka(self, interaction: discord.Interaction, button: discord.ui.Button):
         await interaction.response.send_modal(slotiModal())

    @discord.ui.button(label="–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", style=discord.ButtonStyle.blurple, custom_id="guess_game", emoji="ü§î")
    async def guess_game(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(guessModal())

class guessModal(discord.ui.Modal, title = "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"):
    def __init__(self):
        super().__init__(timeout=None)

    stavka = discord.ui.TextInput(label="–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:", required=True, default="100")
    numbers = discord.ui.TextInput(label="–î–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –±—É–¥–µ—Ç–µ —É–≥–∞–¥—ã–≤–∞—Ç—å?", required=True, default="10")
    number = discord.ui.TextInput(label="–í–∞—à–µ —á–∏—Å–ª–æ", required=True)

    async def on_submit(self, inter: discord.Interaction):
        try:
            stavka = int(self.stavka.value)
        except:
            return await inter.response.send_message("–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!", ephemeral=True)
        
        if stavka < 100:
            return await inter.response.send_message("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 100 –±–µ–±—Ä", ephemeral=True)
        
        try:
            numbers = int(self.numbers.value)
        except:
            return await inter.response.send_message("–í–∞—à–µ —á–∏—Å–ª–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!", ephemeral=True)

        try:
            number = int(self.number.value)
        except:
            return await inter.response.send_message("–í–∞—à–µ —á–∏—Å–ª–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!", ephemeral=True)
        
        if number < 1 or number > numbers:
            return await inter.response.send_message("–í–∞—à–µ —á–∏—Å–ª–æ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω!", ephemeral=True)
        
        if number <= 0:
            return await inter.response.send_message("–í–∞—à–µ —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0!", ephemeral=True)
        
        if numbers <= 0:
            return await inter.response.send_message("–ß–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0!", ephemeral=True)

        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT balance FROM `sbp` WHERE id = ?", (inter.user.id,))
            me = await cursor.fetchone()

        if not me: return await inter.response.send_message(content="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**", view=None, ephemeral=True)
        if me[0] < stavka:
            return await inter.response.send_message(content="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", view=None, ephemeral=True)

        await inter.response.send_message(embed=discord.Embed(title=f"–°–ø–∞—Å–∏–±–æ, —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!", description="–Ø –≤—ã–¥—É–º—ã–≤–∞—é —á–∏—Å–ª–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...", color=discord.Color.random()), ephemeral=True)
        
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("UPDATE `sbp` SET balance = balance -? WHERE id =?", (stavka, inter.user.id,))
            await db.commit()

        await asyncio.sleep(3)

        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            num = random.randint(1, numbers)
            win = round(stavka * numbers*0.2)
            if num == number:
                await cursor.execute("UPDATE `sbp` SET balance = balance +? WHERE id =?", (win, inter.user.id,))
                await inter.edit_original_response(embed=discord.Embed(title=f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!", description=f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {stavka} –±–µ–±—Ä\n–í—ã–∏–≥—Ä—ã—à: {win} –±–µ–±—Ä", color=discord.Color.random()))
            else:
                await inter.edit_original_response(embed=discord.Embed(title=f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!", description=f"–Ø –≤—ã–¥—É–º–∞–ª —á–∏—Å–ª–æ {num}\n–í—ã –º–æ–≥–ª–∏ –±—ã –≤—ã–∏–≥—Ä–∞—Ç—å {win} –±–µ–±—Ä!", color=discord.Color.random()))
            
            await db.commit()
        await update_quest(inter.user, "casino", )

class slotiModal(discord.ui.Modal, title = "–°–ª–æ—Ç—ã"):
    def __init__(self):
        super().__init__(timeout=None)

    stavka = discord.ui.TextInput(label="–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:", required=True)

    async def on_submit(self, inter: discord.Interaction):
        try:
            stavka = int(self.stavka.value)
        except:
            return await inter.response.send_message("–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!", ephemeral=True)
        
        if stavka < 300:
            return await inter.response.send_message("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 300 –±–µ–±—Ä", ephemeral=True)
        
        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            await cursor.execute("SELECT balance FROM `sbp` WHERE id = ?", (inter.user.id,))
            me = await cursor.fetchone()
            if not me: return await inter.response.send_message(content="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –°–∏—Å—Ç–µ–º–µ –ë—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π! –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ, –Ω–∞–ø–∏—Å–∞–≤ **/reg**", view=None, ephemeral=True)
            if me[0] < stavka:
                return await inter.response.send_message(content="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", view=None, ephemeral=True)
        
            await cursor.execute("UPDATE `sbp` SET balance = balance -? WHERE id =?", (stavka, inter.user.id,))
            await db.commit()

        await inter.response.send_message(embed=discord.Embed(title=f"–°–ø–∞—Å–∏–±–æ, —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!", description="–ö—Ä—É—á—É –±–∞—Ä–∞–±–∞–Ω, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...", color=discord.Color.random()), ephemeral=True)
        await asyncio.sleep(3)
        
        emoges = {"7Ô∏è‚É£": 0, "‚ò¢Ô∏è": 0, "3Ô∏è‚É£": 0, "üóÇ": 0, "#Ô∏è‚É£": 0, "üî•": 0, "‚öõÔ∏è": 0, "ü¶ë": 0, "üß™": 0}
        slots = []
        slots.append(random.choice(list(emoges.keys())))

        await inter.edit_original_response(embed=discord.Embed(title=" ".join(slots), color=discord.Color.random()))
        await asyncio.sleep(2)
        slots.append(random.choice(list(emoges.keys())))
        await inter.edit_original_response(embed=discord.Embed(title=" ".join(slots), color=discord.Color.random()))
        await asyncio.sleep(2)
        slots.append(random.choice(list(emoges.keys())))

        for x in emoges:
            for y in slots:
                if y == x:
                    emoges[x] += 1

        for x in emoges:
            if emoges[x] == 3:
                win = round(stavka * 3.5)
                break
            elif emoges[x] == 2:
                win = round(stavka * 2)
                break
            elif emoges[x] == 1:
                win = False

        async with aiosqlite.connect(dbn, timeout=20) as db:
            cursor = await db.cursor()
            if win != False:
                await cursor.execute("UPDATE `sbp` SET balance = balance +? WHERE id =?", (win, inter.user.id,))
                await inter.edit_original_response(embed=discord.Embed(title=f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! " + " ".join(slots), description=f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {stavka} –±–µ–±—Ä\n–í—ã–∏–≥—Ä—ã—à: {win} –±–µ–±—Ä", color=discord.Color.random()))
            else:
                await inter.edit_original_response(embed=discord.Embed(title=f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! " + " ".join(slots), description=f"–í—ã –º–æ–≥–ª–∏ –±—ã –≤—ã–∏–≥—Ä–∞—Ç—å {round(stavka * 3)} –±–µ–±—Ä!", color=discord.Color.random()))
            
            await db.commit()
        await update_quest(inter.user, "casino", )

async def setup(bot: commands.Bot):
    global dbn
    dbn = bot.dbn
    await bot.add_cog(Fun(bot))
    bot.tree.add_command(hug)
    bot.tree.add_command(sexu)
    bot.tree.add_command(kiss)
    bot.tree.add_command(punch)
    print("Fun cog loaded")

@app_commands.context_menu( name="–û–±–Ω—è—Ç—å", )
@app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
@app_commands.allowed_installs(guilds=True, users=True)
@app_commands.check(check)
async def hug(inter: discord.Interaction, user: discord.User):
    if user.bot: return await inter.response.send_message("–ó–∞—á–µ–º –æ–±–Ω–∏–º–∞—Ç—å –±–æ—Ç–∞?", ephemeral=True)
    if user == inter.user: return await inter.response.send_message("–¢—ã —á–µ –æ–±–Ω–∏–º–∞—Ç—å —Å–µ–±—è —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è?", ephemeral=True)
    giffs = ["https://media.tenor.com/hwsbuAcG8UQAAAAM/foxplushy-foxy.gif", "https://media.tenor.com/WIOsEr_4XFcAAAAM/happy-anime.gif", "https://media.tenor.com/BmbTYhCZ5UsAAAAM/yuri-sleeping-yuri-sleep.gif"
                    , "https://media.tenor.com/MApGHq5Kvj0AAAAM/anime-hug.gif", "https://media.tenor.com/iEDbr-ZhHMkAAAAM/anime-hug.gif"]
    randgif = random.choice(giffs)
    await inter.response.send_message(embed=discord.Embed(title=f"{inter.user.global_name} –æ–±–Ω—è–ª(–∞) {user.global_name}", color=discord.Color.random()).set_image(url=randgif))
    await update_quest(inter.user, "hug", )

@app_commands.context_menu( name="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–µ–∫—Å", )
@app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
@app_commands.allowed_installs(guilds=True, users=True)
@app_commands.check(check)
async def sexu(inter: discord.Interaction, user: discord.User):
    if user.bot: return await inter.response.send_message("–ó–∞—á–µ–º –µ–±–∞—Ç—å –±–æ—Ç–∞?", ephemeral=True)
    if user == inter.user: return await inter.response.send_message("–¢—ã —á–µ –µ–±–∞—Ç—å —Å–µ–±—è —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è?", ephemeral=True)

    await inter.response.send_message(embed=discord.Embed(title=f"{user.global_name}, {inter.user.global_name} –ø—Ä–µ–¥–ª–æ–∂–∏–ª –í–∞–º —Å–µ–∫—Å, –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?", color=discord.Color.random())
                                        , view=sexb(user, inter.user))

@app_commands.context_menu( name="–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å", )
@app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
@app_commands.allowed_installs(guilds=True, users=True)
@app_commands.check(check)
async def kiss(inter: discord.Interaction, user: discord.User):
    if user.bot: return await inter.response.send_message("–ó–∞—á–µ–º —Ü–µ–ª–æ–≤–∞—Ç—å –±–æ—Ç–∞?", ephemeral=True)
    if user == inter.user: return await inter.response.send_message("–¢—ã —á–µ —Ü–µ–ª–æ–≤–∞—Ç—å —Å–µ–±—è —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è?", ephemeral=True)
    giffs = ["https://media.tenor.com/jnndDmOm5wMAAAAC/kiss.gif", "https://media.tenor.com/fiafXWajQFoAAAAC/kiss-anime.gif", "https://media.tenor.com/dn_KuOESmUYAAAAC/engage-kiss-anime-kiss.gif"
                , "https://media.tenor.com/9jB6M6aoW0AAAAAM/val-ally-kiss.gif", "https://media.tenor.com/SYwRyd6N1UIAAAAC/anime-kiss.gif"]
    randgif = random.choice(giffs)
    await inter.response.send_message(embed=discord.Embed(title=f"{inter.user.global_name} –ø–æ—Ü–µ–ª–æ–≤–∞–ª(–∞) {user.global_name}", color=discord.Color.random()).set_image(url=randgif))
    await update_quest(inter.user, "kiss", )

@app_commands.context_menu( name="–£–¥–∞—Ä–∏—Ç—å", )
@app_commands.allowed_contexts(guilds=True, dms=True, private_channels=True)
@app_commands.allowed_installs(guilds=True, users=True)
@app_commands.check(check)
async def punch(inter: discord.Interaction, user: discord.User):
    if user.bot: return await inter.response.send_message("–ó–∞—á–µ–º –±–∏—Ç—å –±–æ—Ç–∞?", ephemeral=True)
    if user == inter.user: return await inter.response.send_message("–¢—ã —á–µ –±–∏—Ç—å —Å–µ–±—è —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è?", ephemeral=True)
    giffs = ["https://media.tenor.com/p_mMicg1pgUAAAAC/anya-forger-damian-spy-x-family.gif", "https://media.tenor.com/BoYBoopIkBcAAAAC/anime-smash.gif", "https://media.tenor.com/UH8Jnl1W3CYAAAAC/anime-punch-anime.gif"
                    , "https://media.tenor.com/SwMgGqBirvcAAAAM/saki-saki-kanojo-mo-kanojo.gif", "https://media.tenor.com/vv1mgp7IQn8AAAAC/tgggg-anime.gif"]
    randgif = random.choice(giffs)
    await inter.response.send_message(embed=discord.Embed(title=f"{inter.user.global_name} —É–¥–∞—Ä–∏–ª(–∞) {user.global_name}", color=discord.Color.random()).set_image(url=randgif))
    await update_quest(inter.user, "punch", )