import datetime
import enum
from db.database_instance import db
import discord
import pytz

class RpsStatus(enum.Enum):
    in_game = 1
    waiting_accept = 2
    finished = 3
    timeout = 4

class Rps():
    """–ö–∞–º–µ–Ω—å –ù–æ–∂–Ω–∏—Ü—ã –ë—É–º–∞–≥–∞"""
    class RpsAcceptView(discord.ui.View):
        def __init__(self, game: 'Rps'):
            super().__init__(timeout=60)
            self.game = game
            self.message: discord.Message = None

        async def on_timeout(self) -> None:
            if self.game.status != RpsStatus.waiting_accept: return
            self.children[0].disabled = True
            self.children[0].label = "–ù–µ —É—Å–ø–µ–ª :("
            await self.message.edit(content="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", view=self)
            self.game.status = RpsStatus.timeout

        @discord.ui.button(label="–°–æ–≥–ª–∞—Å–µ–Ω –∏–≥—Ä–∞—Ç—å", style=discord.ButtonStyle.success)
        async def yesplayrps(self, inter: discord.Interaction, button: discord.ui.Button):
            remaining_time = (self.message.created_at + datetime.timedelta(minutes=1)) - datetime.datetime.now(pytz.utc)
            self.timeout = max(remaining_time.total_seconds(), 0)
            if inter.user != self.game.p2: return await inter.response.send_message("–ù–µ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏", ephemeral=True)
            if self.game.stavka != None:
                balance = await db.sbp.get_balance(inter.user.id)
                if balance < self.game.stavka: return await inter.response.send_message("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥", ephemeral=True)

                await db.sbp.decrease_balance(inter.user.id, self.game.stavka)
                await db.sbp.decrease_balance(self.game.p1.id, self.game.stavka)

            embed = discord.Embed(
                title=f"–¶—É–µ—Ñ–∞ {self.game.p1.name} VS {self.game.p2.name}",
                description=f"–ò–≥—Ä–æ–∫–∏ –¥—É–º–∞—é—Ç...\n||–£ –Ω–∏—Ö 3 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ç–æ —á—Ç–æ–± –¥—É–º–æ—Ü||",
                color=discord.Color.random()
            )

            self.game.status = RpsStatus.in_game
            view = self.game.RpsGameView(self.game, self.message)
            self.game.view = view

            await inter.response.edit_message(embed=embed, view=view)

    class RpsGameView(discord.ui.View):
        def __init__(self, game: 'Rps', message = discord.Message):
            super().__init__(timeout=180)
            self.game = game
            self.message = message

        async def on_timeout(self) -> None:
            if self.game.status != RpsStatus.in_game: return
            for x in self.children:
                x.disabled = True
            self.game.status = RpsStatus.timeout
            await self.message.edit(content="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", view=self)

            if self.game.stavka != None:
                await db.sbp.increase_balance(self.game.p1.id, self.game.stavka)
                await db.sbp.increase_balance(self.game.p2.id, self.game.stavka)

        @discord.ui.button(label="–ö–∞–º–µ–Ω—å", style=discord.ButtonStyle.success, emoji="ü™®")
        async def rpsrock(self, inter: discord.Interaction, button: discord.ui.Button):
            remaining_time = (inter.message.edited_at + datetime.timedelta(minutes=3)) - datetime.datetime.now(pytz.utc)
            self.timeout = max(remaining_time.total_seconds(), 0)
            if inter.user != self.game.p1 and inter.user!= self.game.p2: return await inter.response.send_message("–ù–µ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏", ephemeral=True)
            if self.game.status != RpsStatus.in_game: return await inter.response.send_message("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞", ephemeral=True)
            if self.game.choices[inter.user] != None: return await inter.response.send_message("–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª", ephemeral=True)

            await self.game.set_choice(inter.user, "–∫–∞–º–µ–Ω—å")

            opponent = self.game.p2 if inter.user == self.game.p1 else self.game.p1

            if self.game.choices[opponent] != None:
                await self.game.get_winner(self.message)

            await inter.response.send_message("–£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª –∫–∞–º–µ–Ω—å!", ephemeral=True)

        @discord.ui.button(label="–ù–æ–∂–Ω–∏—Ü—ã", style=discord.ButtonStyle.success, emoji="‚úÇÔ∏è")
        async def rpssc(self, inter: discord.Interaction, button: discord.ui.Button):
            remaining_time = (inter.message.edited_at + datetime.timedelta(minutes=3)) - datetime.datetime.now(pytz.utc)
            self.timeout = max(remaining_time.total_seconds(), 0)
            if inter.user != self.game.p1 and inter.user!= self.game.p2: return await inter.response.send_message("–ù–µ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏", ephemeral=True)
            if self.game.status != RpsStatus.in_game: return await inter.response.send_message("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞", ephemeral=True)
            if self.game.choices[inter.user] != None: return await inter.response.send_message("–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª", ephemeral=True)

            await self.game.set_choice(inter.user, "–Ω–æ–∂–Ω–∏—Ü—ã")

            opponent = self.game.p2 if inter.user == self.game.p1 else self.game.p1

            if self.game.choices[opponent] != None:
                await self.game.get_winner(self.message)

            await inter.response.send_message("–£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª –Ω–æ–∂–Ω–∏—Ü—ã!", ephemeral=True)

        @discord.ui.button(label="–ë—É–º–∞–≥–∞", style=discord.ButtonStyle.success, emoji="üìÑ")
        async def rpspaper(self, inter: discord.Interaction, button: discord.ui.Button):
            remaining_time = (inter.message.edited_at + datetime.timedelta(minutes=3)) - datetime.datetime.now(pytz.utc)
            self.timeout = max(remaining_time.total_seconds(), 0)
            if inter.user != self.game.p1 and inter.user!= self.game.p2: return await inter.response.send_message("–ù–µ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏", ephemeral=True)
            if self.game.status != RpsStatus.in_game: return await inter.response.send_message("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞", ephemeral=True)
            if self.game.choices[inter.user] != None: return await inter.response.send_message("–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª", ephemeral=True)

            await self.game.set_choice(inter.user, "–±—É–º–∞–≥–∞")

            opponent = self.game.p2 if inter.user == self.game.p1 else self.game.p1

            if self.game.choices[opponent] != None:
                await self.game.get_winner(self.message)

            await inter.response.send_message("–£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª –±—É–º–∞–≥–∞!", ephemeral=True)

    def __init__(self, p1: discord.User | discord.Member, p2: discord.User | discord.Member, stavka: int = None, status: RpsStatus = RpsStatus.waiting_accept):
        self.p1 = p1
        self.p2 = p2
        self.stavka = stavka
        self.status = status
        self.choices = {self.p1: None, self.p2: None}
        self.view = self.RpsAcceptView(self)

    async def meow(self):
        """Meow"""
        return "meow"
    
    async def set_choice(self, player, choice):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞"""
        if player not in self.choices:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–≥—Ä–æ–∫")
        if choice not in ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        self.choices[player] = choice

        if all(self.choices.values()):
            self.status = RpsStatus.finished

    async def get_winner(self, message: discord.Message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞"""
        if self.status != RpsStatus.finished:
            raise Exception("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞")

        p1_choice = self.choices[self.p1]
        p2_choice = self.choices[self.p2]

        if p1_choice == p2_choice:
            for x in self.view.children:
                x.disabled = True

            if self.stavka != None:
                await db.sbp.increase_balance(self.p1.id, self.stavka)
                await db.sbp.increase_balance(self.p2.id, self.stavka)

            return await message.edit(embed=discord.Embed(
                title=f"–¶—É–µ—Ñ–∞ {self.p1.name} VS {self.p2.name}",
                description="**–ù–∏—á—å—è!!!!!**",
                color=discord.Color.yellow()
            ), view=self.view)
        elif (p1_choice == "–∫–∞–º–µ–Ω—å" and p2_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or \
             (p1_choice == "–Ω–æ–∂–Ω–∏—Ü—ã" and p2_choice == "–±—É–º–∞–≥–∞") or \
             (p1_choice == "–±—É–º–∞–≥–∞" and p2_choice == "–∫–∞–º–µ–Ω—å"):
            for x in self.view.children:
                x.disabled = True

            if self.stavka != None:
                await db.sbp.increase_balance(self.p1.id, self.stavka*2)

            return await message.edit(embed=discord.Embed(
                title=f"–¶—É–µ—Ñ–∞ {self.p1.name} VS {self.p2.name}", 
                description=f"**{self.p1.name} –≤—ã–∏–≥—Ä–∞–ª!!!!!!**",
                color=discord.Color.green()
            ), view=self.view)
        else:
            for x in self.view.children:
                x.disabled = True

            if self.stavka != None:
                await db.sbp.increase_balance(self.p2.id, self.stavka*2)

            return await message.edit(embed=discord.Embed(
                title=f"–¶—É–µ—Ñ–∞ {self.p1.name} VS {self.p2.name}",
                description=f"**{self.p2.name} –≤—ã–∏–≥—Ä–∞–ª!!!!!!**",
                color=discord.Color.green()
            ), view=self.view)
        
async def offer_rps(inter: discord.Interaction, user: discord.User, stavka: int = None):
    if user.bot: return await inter.response.send_message("–ó–∞—á–µ–º –∏–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º?", ephemeral=True)
    if user == inter.user: return await inter.response.send_message("–¢—ã —á–µ –∏–≥—Ä–∞—Ç—å c —Å–æ–±–æ–π —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è?", ephemeral=True)
    if stavka and stavka < 50: return await inter.response.send_message("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 50 –±–µ–±—Ä", ephemeral=True)

    if stavka != None:
        me = await db.sbp.get_user(inter.user.id)
        
        from cogs.sbp import AUTHOR_UNATHORIZED_ERROR, USER_UNATHORIZED_ERROR
        
        if not me: return await inter.response.send_message(AUTHOR_UNATHORIZED_ERROR, ephemeral=True)
        if me.balance < stavka: return await inter.response.send_message("–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –±–µ–±—Ä.", ephemeral=True)

        usr = await db.sbp.get_user(user.id)
        if not usr: return await inter.response.send_message(USER_UNATHORIZED_ERROR, ephemeral=True)
        
    embed = discord.Embed(title="–¶—É–µ—Ñ–∞", description=f"**{inter.user.name}** –ø—Ä–µ–¥–ª–æ–∂–∏–ª **{user.name}** –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Ü—É–µ—Ñ–∞!\n–ë–µ–∑ —Å—Ç–∞–≤–∫–∏!\n–£ –Ω–µ–≥–æ 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –æ—Ç–≤–µ—Ç!" if stavka == None else
                            f"**{inter.user.name}** –ø—Ä–µ–¥–ª–æ–∂–∏–ª **{user.name}** –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Ü—É–µ—Ñ–∞!\n–°—Ç–∞–≤–∫–∞ {stavka} –±–µ–±—Ä\n–£ –Ω–µ–≥–æ 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –æ—Ç–≤–µ—Ç!", color=discord.Color.random())

    game = Rps(inter.user, user, stavka)
    await inter.response.send_message(embed=embed, view=game.view)
    game.view.message = await inter.original_response()